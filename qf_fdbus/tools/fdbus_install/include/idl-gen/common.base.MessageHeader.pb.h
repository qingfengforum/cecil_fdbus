// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.base.MessageHeader.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2ebase_2eMessageHeader_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2ebase_2eMessageHeader_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "common.base.Token.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2ebase_2eMessageHeader_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2ebase_2eMessageHeader_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace NFdbBase {
class FdbAuthentication;
class FdbAuthenticationDefaultTypeInternal;
extern FdbAuthenticationDefaultTypeInternal _FdbAuthentication_default_instance_;
class FdbLogProducerData;
class FdbLogProducerDataDefaultTypeInternal;
extern FdbLogProducerDataDefaultTypeInternal _FdbLogProducerData_default_instance_;
class FdbMessageHeader;
class FdbMessageHeaderDefaultTypeInternal;
extern FdbMessageHeaderDefaultTypeInternal _FdbMessageHeader_default_instance_;
class FdbMsgErrorInfo;
class FdbMsgErrorInfoDefaultTypeInternal;
extern FdbMsgErrorInfoDefaultTypeInternal _FdbMsgErrorInfo_default_instance_;
class FdbMsgLogConfig;
class FdbMsgLogConfigDefaultTypeInternal;
extern FdbMsgLogConfigDefaultTypeInternal _FdbMsgLogConfig_default_instance_;
class FdbMsgObjectInfo;
class FdbMsgObjectInfoDefaultTypeInternal;
extern FdbMsgObjectInfoDefaultTypeInternal _FdbMsgObjectInfo_default_instance_;
class FdbMsgObjectInfoTbl;
class FdbMsgObjectInfoTblDefaultTypeInternal;
extern FdbMsgObjectInfoTblDefaultTypeInternal _FdbMsgObjectInfoTbl_default_instance_;
class FdbMsgSubscribe;
class FdbMsgSubscribeDefaultTypeInternal;
extern FdbMsgSubscribeDefaultTypeInternal _FdbMsgSubscribe_default_instance_;
class FdbMsgSubscribeItem;
class FdbMsgSubscribeItemDefaultTypeInternal;
extern FdbMsgSubscribeItemDefaultTypeInternal _FdbMsgSubscribeItem_default_instance_;
class FdbTraceConfig;
class FdbTraceConfigDefaultTypeInternal;
extern FdbTraceConfigDefaultTypeInternal _FdbTraceConfig_default_instance_;
class FdbTraceProducerData;
class FdbTraceProducerDataDefaultTypeInternal;
extern FdbTraceProducerDataDefaultTypeInternal _FdbTraceProducerData_default_instance_;
}  // namespace NFdbBase
PROTOBUF_NAMESPACE_OPEN
template<> ::NFdbBase::FdbAuthentication* Arena::CreateMaybeMessage<::NFdbBase::FdbAuthentication>(Arena*);
template<> ::NFdbBase::FdbLogProducerData* Arena::CreateMaybeMessage<::NFdbBase::FdbLogProducerData>(Arena*);
template<> ::NFdbBase::FdbMessageHeader* Arena::CreateMaybeMessage<::NFdbBase::FdbMessageHeader>(Arena*);
template<> ::NFdbBase::FdbMsgErrorInfo* Arena::CreateMaybeMessage<::NFdbBase::FdbMsgErrorInfo>(Arena*);
template<> ::NFdbBase::FdbMsgLogConfig* Arena::CreateMaybeMessage<::NFdbBase::FdbMsgLogConfig>(Arena*);
template<> ::NFdbBase::FdbMsgObjectInfo* Arena::CreateMaybeMessage<::NFdbBase::FdbMsgObjectInfo>(Arena*);
template<> ::NFdbBase::FdbMsgObjectInfoTbl* Arena::CreateMaybeMessage<::NFdbBase::FdbMsgObjectInfoTbl>(Arena*);
template<> ::NFdbBase::FdbMsgSubscribe* Arena::CreateMaybeMessage<::NFdbBase::FdbMsgSubscribe>(Arena*);
template<> ::NFdbBase::FdbMsgSubscribeItem* Arena::CreateMaybeMessage<::NFdbBase::FdbMsgSubscribeItem>(Arena*);
template<> ::NFdbBase::FdbTraceConfig* Arena::CreateMaybeMessage<::NFdbBase::FdbTraceConfig>(Arena*);
template<> ::NFdbBase::FdbTraceProducerData* Arena::CreateMaybeMessage<::NFdbBase::FdbTraceProducerData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace NFdbBase {

enum FdbMessageType : int {
  MT_UNKNOWN = 0,
  MT_REQUEST = 1,
  MT_REPLY = 2,
  MT_SUBSCRIBE_REQ = 3,
  MT_BROADCAST = 4,
  MT_SIDEBAND_REQUEST = 5,
  MT_SIDEBAND_REPLY = 6,
  MT_STATUS = 7,
  MT_MAX = 8
};
bool FdbMessageType_IsValid(int value);
constexpr FdbMessageType FdbMessageType_MIN = MT_UNKNOWN;
constexpr FdbMessageType FdbMessageType_MAX = MT_MAX;
constexpr int FdbMessageType_ARRAYSIZE = FdbMessageType_MAX + 1;

const std::string& FdbMessageType_Name(FdbMessageType value);
template<typename T>
inline const std::string& FdbMessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FdbMessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FdbMessageType_Name.");
  return FdbMessageType_Name(static_cast<FdbMessageType>(enum_t_value));
}
bool FdbMessageType_Parse(
    const std::string& name, FdbMessageType* value);
enum FdbTraceLogLevel : int {
  FDB_LL_VERBOSE = 0,
  FDB_LL_DEBUG = 1,
  FDB_LL_INFO = 2,
  FDB_LL_WARNING = 3,
  FDB_LL_ERROR = 4,
  FDB_LL_FATAL = 5,
  FDB_LL_SILENT = 6
};
bool FdbTraceLogLevel_IsValid(int value);
constexpr FdbTraceLogLevel FdbTraceLogLevel_MIN = FDB_LL_VERBOSE;
constexpr FdbTraceLogLevel FdbTraceLogLevel_MAX = FDB_LL_SILENT;
constexpr int FdbTraceLogLevel_ARRAYSIZE = FdbTraceLogLevel_MAX + 1;

const std::string& FdbTraceLogLevel_Name(FdbTraceLogLevel value);
template<typename T>
inline const std::string& FdbTraceLogLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FdbTraceLogLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FdbTraceLogLevel_Name.");
  return FdbTraceLogLevel_Name(static_cast<FdbTraceLogLevel>(enum_t_value));
}
bool FdbTraceLogLevel_Parse(
    const std::string& name, FdbTraceLogLevel* value);
enum FdbMessageLoggerCode : int {
  REQ_FDBUS_LOG = 0,
  REQ_TRACE_LOG = 1,
  REQ_LOGGER_CONFIG = 2,
  REQ_TRACE_CONFIG = 3,
  NTF_LOGGER_CONFIG = 4,
  NTF_TRACE_CONFIG = 5,
  NTF_FDBUS_LOG = 6,
  NTF_TRACE_LOG = 7
};
bool FdbMessageLoggerCode_IsValid(int value);
constexpr FdbMessageLoggerCode FdbMessageLoggerCode_MIN = REQ_FDBUS_LOG;
constexpr FdbMessageLoggerCode FdbMessageLoggerCode_MAX = NTF_TRACE_LOG;
constexpr int FdbMessageLoggerCode_ARRAYSIZE = FdbMessageLoggerCode_MAX + 1;

const std::string& FdbMessageLoggerCode_Name(FdbMessageLoggerCode value);
template<typename T>
inline const std::string& FdbMessageLoggerCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FdbMessageLoggerCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FdbMessageLoggerCode_Name.");
  return FdbMessageLoggerCode_Name(static_cast<FdbMessageLoggerCode>(enum_t_value));
}
bool FdbMessageLoggerCode_Parse(
    const std::string& name, FdbMessageLoggerCode* value);
enum FdbSubscribeType : int {
  SUB_TYPE_NORMAL = 0,
  SUB_TYPE_ON_REQUEST = 1
};
bool FdbSubscribeType_IsValid(int value);
constexpr FdbSubscribeType FdbSubscribeType_MIN = SUB_TYPE_NORMAL;
constexpr FdbSubscribeType FdbSubscribeType_MAX = SUB_TYPE_ON_REQUEST;
constexpr int FdbSubscribeType_ARRAYSIZE = FdbSubscribeType_MAX + 1;

const std::string& FdbSubscribeType_Name(FdbSubscribeType value);
template<typename T>
inline const std::string& FdbSubscribeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FdbSubscribeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FdbSubscribeType_Name.");
  return FdbSubscribeType_Name(static_cast<FdbSubscribeType>(enum_t_value));
}
bool FdbSubscribeType_Parse(
    const std::string& name, FdbSubscribeType* value);
// ===================================================================

class FdbMessageHeader :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:NFdbBase.FdbMessageHeader) */ {
 public:
  FdbMessageHeader();
  virtual ~FdbMessageHeader();

  FdbMessageHeader(const FdbMessageHeader& from);
  FdbMessageHeader(FdbMessageHeader&& from) noexcept
    : FdbMessageHeader() {
    *this = ::std::move(from);
  }

  inline FdbMessageHeader& operator=(const FdbMessageHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline FdbMessageHeader& operator=(FdbMessageHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FdbMessageHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FdbMessageHeader* internal_default_instance() {
    return reinterpret_cast<const FdbMessageHeader*>(
               &_FdbMessageHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FdbMessageHeader& a, FdbMessageHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(FdbMessageHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FdbMessageHeader* New() const final {
    return CreateMaybeMessage<FdbMessageHeader>(nullptr);
  }

  FdbMessageHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FdbMessageHeader>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FdbMessageHeader& from);
  void MergeFrom(const FdbMessageHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FdbMessageHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFdbBase.FdbMessageHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderNameFieldNumber = 7,
    kBroadcastFilterFieldNumber = 8,
    kTypeFieldNumber = 1,
    kSerialNumberFieldNumber = 2,
    kCodeFieldNumber = 3,
    kFlagFieldNumber = 4,
    kObjectIdFieldNumber = 5,
    kPayloadSizeFieldNumber = 6,
    kSendOrArriveTimeFieldNumber = 10,
    kReplyTimeFieldNumber = 11,
  };
  // optional string sender_name = 7;
  bool has_sender_name() const;
  private:
  bool _internal_has_sender_name() const;
  public:
  void clear_sender_name();
  const std::string& sender_name() const;
  void set_sender_name(const std::string& value);
  void set_sender_name(std::string&& value);
  void set_sender_name(const char* value);
  void set_sender_name(const char* value, size_t size);
  std::string* mutable_sender_name();
  std::string* release_sender_name();
  void set_allocated_sender_name(std::string* sender_name);
  private:
  const std::string& _internal_sender_name() const;
  void _internal_set_sender_name(const std::string& value);
  std::string* _internal_mutable_sender_name();
  public:

  // optional string broadcast_filter = 8;
  bool has_broadcast_filter() const;
  private:
  bool _internal_has_broadcast_filter() const;
  public:
  void clear_broadcast_filter();
  const std::string& broadcast_filter() const;
  void set_broadcast_filter(const std::string& value);
  void set_broadcast_filter(std::string&& value);
  void set_broadcast_filter(const char* value);
  void set_broadcast_filter(const char* value, size_t size);
  std::string* mutable_broadcast_filter();
  std::string* release_broadcast_filter();
  void set_allocated_broadcast_filter(std::string* broadcast_filter);
  private:
  const std::string& _internal_broadcast_filter() const;
  void _internal_set_broadcast_filter(const std::string& value);
  std::string* _internal_mutable_broadcast_filter();
  public:

  // required .NFdbBase.FdbMessageType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::NFdbBase::FdbMessageType type() const;
  void set_type(::NFdbBase::FdbMessageType value);
  private:
  ::NFdbBase::FdbMessageType _internal_type() const;
  void _internal_set_type(::NFdbBase::FdbMessageType value);
  public:

  // required int32 serial_number = 2;
  bool has_serial_number() const;
  private:
  bool _internal_has_serial_number() const;
  public:
  void clear_serial_number();
  ::PROTOBUF_NAMESPACE_ID::int32 serial_number() const;
  void set_serial_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serial_number() const;
  void _internal_set_serial_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 code = 3;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint32 flag = 4;
  bool has_flag() const;
  private:
  bool _internal_has_flag() const;
  public:
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::uint32 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flag() const;
  void _internal_set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 object_id = 5;
  bool has_object_id() const;
  private:
  bool _internal_has_object_id() const;
  public:
  void clear_object_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 object_id() const;
  void set_object_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_object_id() const;
  void _internal_set_object_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 payload_size = 6;
  bool has_payload_size() const;
  private:
  bool _internal_has_payload_size() const;
  public:
  void clear_payload_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 payload_size() const;
  void set_payload_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_payload_size() const;
  void _internal_set_payload_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 send_or_arrive_time = 10;
  bool has_send_or_arrive_time() const;
  private:
  bool _internal_has_send_or_arrive_time() const;
  public:
  void clear_send_or_arrive_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 send_or_arrive_time() const;
  void set_send_or_arrive_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_send_or_arrive_time() const;
  void _internal_set_send_or_arrive_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 reply_time = 11;
  bool has_reply_time() const;
  private:
  bool _internal_has_reply_time() const;
  public:
  void clear_reply_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 reply_time() const;
  void set_reply_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_reply_time() const;
  void _internal_set_reply_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:NFdbBase.FdbMessageHeader)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broadcast_filter_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 serial_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 object_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 payload_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 send_or_arrive_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 reply_time_;
  friend struct ::TableStruct_common_2ebase_2eMessageHeader_2eproto;
};
// -------------------------------------------------------------------

class FdbMsgSubscribeItem :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:NFdbBase.FdbMsgSubscribeItem) */ {
 public:
  FdbMsgSubscribeItem();
  virtual ~FdbMsgSubscribeItem();

  FdbMsgSubscribeItem(const FdbMsgSubscribeItem& from);
  FdbMsgSubscribeItem(FdbMsgSubscribeItem&& from) noexcept
    : FdbMsgSubscribeItem() {
    *this = ::std::move(from);
  }

  inline FdbMsgSubscribeItem& operator=(const FdbMsgSubscribeItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline FdbMsgSubscribeItem& operator=(FdbMsgSubscribeItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FdbMsgSubscribeItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FdbMsgSubscribeItem* internal_default_instance() {
    return reinterpret_cast<const FdbMsgSubscribeItem*>(
               &_FdbMsgSubscribeItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FdbMsgSubscribeItem& a, FdbMsgSubscribeItem& b) {
    a.Swap(&b);
  }
  inline void Swap(FdbMsgSubscribeItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FdbMsgSubscribeItem* New() const final {
    return CreateMaybeMessage<FdbMsgSubscribeItem>(nullptr);
  }

  FdbMsgSubscribeItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FdbMsgSubscribeItem>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FdbMsgSubscribeItem& from);
  void MergeFrom(const FdbMsgSubscribeItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FdbMsgSubscribeItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFdbBase.FdbMsgSubscribeItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilterFieldNumber = 2,
    kMsgCodeFieldNumber = 1,
    kTypeFieldNumber = 3,
  };
  // optional string filter = 2;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const std::string& filter() const;
  void set_filter(const std::string& value);
  void set_filter(std::string&& value);
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  std::string* mutable_filter();
  std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // required int32 msg_code = 1;
  bool has_msg_code() const;
  private:
  bool _internal_has_msg_code() const;
  public:
  void clear_msg_code();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_code() const;
  void set_msg_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_code() const;
  void _internal_set_msg_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .NFdbBase.FdbSubscribeType type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::NFdbBase::FdbSubscribeType type() const;
  void set_type(::NFdbBase::FdbSubscribeType value);
  private:
  ::NFdbBase::FdbSubscribeType _internal_type() const;
  void _internal_set_type(::NFdbBase::FdbSubscribeType value);
  public:

  // @@protoc_insertion_point(class_scope:NFdbBase.FdbMsgSubscribeItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_code_;
  int type_;
  friend struct ::TableStruct_common_2ebase_2eMessageHeader_2eproto;
};
// -------------------------------------------------------------------

class FdbMsgSubscribe :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:NFdbBase.FdbMsgSubscribe) */ {
 public:
  FdbMsgSubscribe();
  virtual ~FdbMsgSubscribe();

  FdbMsgSubscribe(const FdbMsgSubscribe& from);
  FdbMsgSubscribe(FdbMsgSubscribe&& from) noexcept
    : FdbMsgSubscribe() {
    *this = ::std::move(from);
  }

  inline FdbMsgSubscribe& operator=(const FdbMsgSubscribe& from) {
    CopyFrom(from);
    return *this;
  }
  inline FdbMsgSubscribe& operator=(FdbMsgSubscribe&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FdbMsgSubscribe& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FdbMsgSubscribe* internal_default_instance() {
    return reinterpret_cast<const FdbMsgSubscribe*>(
               &_FdbMsgSubscribe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FdbMsgSubscribe& a, FdbMsgSubscribe& b) {
    a.Swap(&b);
  }
  inline void Swap(FdbMsgSubscribe* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FdbMsgSubscribe* New() const final {
    return CreateMaybeMessage<FdbMsgSubscribe>(nullptr);
  }

  FdbMsgSubscribe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FdbMsgSubscribe>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FdbMsgSubscribe& from);
  void MergeFrom(const FdbMsgSubscribe& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FdbMsgSubscribe* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFdbBase.FdbMsgSubscribe";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotifyListFieldNumber = 1,
  };
  // repeated .NFdbBase.FdbMsgSubscribeItem notify_list = 1;
  int notify_list_size() const;
  private:
  int _internal_notify_list_size() const;
  public:
  void clear_notify_list();
  ::NFdbBase::FdbMsgSubscribeItem* mutable_notify_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFdbBase::FdbMsgSubscribeItem >*
      mutable_notify_list();
  private:
  const ::NFdbBase::FdbMsgSubscribeItem& _internal_notify_list(int index) const;
  ::NFdbBase::FdbMsgSubscribeItem* _internal_add_notify_list();
  public:
  const ::NFdbBase::FdbMsgSubscribeItem& notify_list(int index) const;
  ::NFdbBase::FdbMsgSubscribeItem* add_notify_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFdbBase::FdbMsgSubscribeItem >&
      notify_list() const;

  // @@protoc_insertion_point(class_scope:NFdbBase.FdbMsgSubscribe)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFdbBase::FdbMsgSubscribeItem > notify_list_;
  friend struct ::TableStruct_common_2ebase_2eMessageHeader_2eproto;
};
// -------------------------------------------------------------------

class FdbMsgErrorInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:NFdbBase.FdbMsgErrorInfo) */ {
 public:
  FdbMsgErrorInfo();
  virtual ~FdbMsgErrorInfo();

  FdbMsgErrorInfo(const FdbMsgErrorInfo& from);
  FdbMsgErrorInfo(FdbMsgErrorInfo&& from) noexcept
    : FdbMsgErrorInfo() {
    *this = ::std::move(from);
  }

  inline FdbMsgErrorInfo& operator=(const FdbMsgErrorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FdbMsgErrorInfo& operator=(FdbMsgErrorInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FdbMsgErrorInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FdbMsgErrorInfo* internal_default_instance() {
    return reinterpret_cast<const FdbMsgErrorInfo*>(
               &_FdbMsgErrorInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FdbMsgErrorInfo& a, FdbMsgErrorInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FdbMsgErrorInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FdbMsgErrorInfo* New() const final {
    return CreateMaybeMessage<FdbMsgErrorInfo>(nullptr);
  }

  FdbMsgErrorInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FdbMsgErrorInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FdbMsgErrorInfo& from);
  void MergeFrom(const FdbMsgErrorInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FdbMsgErrorInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFdbBase.FdbMsgErrorInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // optional string description = 2;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // required int32 error_code = 1;
  bool has_error_code() const;
  private:
  bool _internal_has_error_code() const;
  public:
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::int32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error_code() const;
  void _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:NFdbBase.FdbMsgErrorInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_code_;
  friend struct ::TableStruct_common_2ebase_2eMessageHeader_2eproto;
};
// -------------------------------------------------------------------

class FdbMsgObjectInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:NFdbBase.FdbMsgObjectInfo) */ {
 public:
  FdbMsgObjectInfo();
  virtual ~FdbMsgObjectInfo();

  FdbMsgObjectInfo(const FdbMsgObjectInfo& from);
  FdbMsgObjectInfo(FdbMsgObjectInfo&& from) noexcept
    : FdbMsgObjectInfo() {
    *this = ::std::move(from);
  }

  inline FdbMsgObjectInfo& operator=(const FdbMsgObjectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FdbMsgObjectInfo& operator=(FdbMsgObjectInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FdbMsgObjectInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FdbMsgObjectInfo* internal_default_instance() {
    return reinterpret_cast<const FdbMsgObjectInfo*>(
               &_FdbMsgObjectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FdbMsgObjectInfo& a, FdbMsgObjectInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FdbMsgObjectInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FdbMsgObjectInfo* New() const final {
    return CreateMaybeMessage<FdbMsgObjectInfo>(nullptr);
  }

  FdbMsgObjectInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FdbMsgObjectInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FdbMsgObjectInfo& from);
  void MergeFrom(const FdbMsgObjectInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FdbMsgObjectInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFdbBase.FdbMsgObjectInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjNameFieldNumber = 2,
    kObjIdFieldNumber = 1,
  };
  // optional string obj_name = 2;
  bool has_obj_name() const;
  private:
  bool _internal_has_obj_name() const;
  public:
  void clear_obj_name();
  const std::string& obj_name() const;
  void set_obj_name(const std::string& value);
  void set_obj_name(std::string&& value);
  void set_obj_name(const char* value);
  void set_obj_name(const char* value, size_t size);
  std::string* mutable_obj_name();
  std::string* release_obj_name();
  void set_allocated_obj_name(std::string* obj_name);
  private:
  const std::string& _internal_obj_name() const;
  void _internal_set_obj_name(const std::string& value);
  std::string* _internal_mutable_obj_name();
  public:

  // required uint32 obj_id = 1;
  bool has_obj_id() const;
  private:
  bool _internal_has_obj_id() const;
  public:
  void clear_obj_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 obj_id() const;
  void set_obj_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_obj_id() const;
  void _internal_set_obj_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:NFdbBase.FdbMsgObjectInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obj_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 obj_id_;
  friend struct ::TableStruct_common_2ebase_2eMessageHeader_2eproto;
};
// -------------------------------------------------------------------

class FdbMsgObjectInfoTbl :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:NFdbBase.FdbMsgObjectInfoTbl) */ {
 public:
  FdbMsgObjectInfoTbl();
  virtual ~FdbMsgObjectInfoTbl();

  FdbMsgObjectInfoTbl(const FdbMsgObjectInfoTbl& from);
  FdbMsgObjectInfoTbl(FdbMsgObjectInfoTbl&& from) noexcept
    : FdbMsgObjectInfoTbl() {
    *this = ::std::move(from);
  }

  inline FdbMsgObjectInfoTbl& operator=(const FdbMsgObjectInfoTbl& from) {
    CopyFrom(from);
    return *this;
  }
  inline FdbMsgObjectInfoTbl& operator=(FdbMsgObjectInfoTbl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FdbMsgObjectInfoTbl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FdbMsgObjectInfoTbl* internal_default_instance() {
    return reinterpret_cast<const FdbMsgObjectInfoTbl*>(
               &_FdbMsgObjectInfoTbl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FdbMsgObjectInfoTbl& a, FdbMsgObjectInfoTbl& b) {
    a.Swap(&b);
  }
  inline void Swap(FdbMsgObjectInfoTbl* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FdbMsgObjectInfoTbl* New() const final {
    return CreateMaybeMessage<FdbMsgObjectInfoTbl>(nullptr);
  }

  FdbMsgObjectInfoTbl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FdbMsgObjectInfoTbl>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FdbMsgObjectInfoTbl& from);
  void MergeFrom(const FdbMsgObjectInfoTbl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FdbMsgObjectInfoTbl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFdbBase.FdbMsgObjectInfoTbl";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // repeated .NFdbBase.FdbMsgObjectInfo info = 1;
  int info_size() const;
  private:
  int _internal_info_size() const;
  public:
  void clear_info();
  ::NFdbBase::FdbMsgObjectInfo* mutable_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFdbBase::FdbMsgObjectInfo >*
      mutable_info();
  private:
  const ::NFdbBase::FdbMsgObjectInfo& _internal_info(int index) const;
  ::NFdbBase::FdbMsgObjectInfo* _internal_add_info();
  public:
  const ::NFdbBase::FdbMsgObjectInfo& info(int index) const;
  ::NFdbBase::FdbMsgObjectInfo* add_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFdbBase::FdbMsgObjectInfo >&
      info() const;

  // @@protoc_insertion_point(class_scope:NFdbBase.FdbMsgObjectInfoTbl)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFdbBase::FdbMsgObjectInfo > info_;
  friend struct ::TableStruct_common_2ebase_2eMessageHeader_2eproto;
};
// -------------------------------------------------------------------

class FdbLogProducerData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:NFdbBase.FdbLogProducerData) */ {
 public:
  FdbLogProducerData();
  virtual ~FdbLogProducerData();

  FdbLogProducerData(const FdbLogProducerData& from);
  FdbLogProducerData(FdbLogProducerData&& from) noexcept
    : FdbLogProducerData() {
    *this = ::std::move(from);
  }

  inline FdbLogProducerData& operator=(const FdbLogProducerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FdbLogProducerData& operator=(FdbLogProducerData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FdbLogProducerData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FdbLogProducerData* internal_default_instance() {
    return reinterpret_cast<const FdbLogProducerData*>(
               &_FdbLogProducerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FdbLogProducerData& a, FdbLogProducerData& b) {
    a.Swap(&b);
  }
  inline void Swap(FdbLogProducerData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FdbLogProducerData* New() const final {
    return CreateMaybeMessage<FdbLogProducerData>(nullptr);
  }

  FdbLogProducerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FdbLogProducerData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FdbLogProducerData& from);
  void MergeFrom(const FdbLogProducerData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FdbLogProducerData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFdbBase.FdbLogProducerData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderHostNameFieldNumber = 2,
    kSenderNameFieldNumber = 3,
    kReceiverNameFieldNumber = 4,
    kServiceNameFieldNumber = 5,
    kLoggerPidFieldNumber = 1,
    kTypeFieldNumber = 6,
    kCodeFieldNumber = 7,
    kSerialNumberFieldNumber = 8,
    kTimeStampFieldNumber = 9,
    kIsStringFieldNumber = 10,
    kMsgPayloadSizeFieldNumber = 11,
    kObjectIdFieldNumber = 12,
  };
  // required string sender_host_name = 2;
  bool has_sender_host_name() const;
  private:
  bool _internal_has_sender_host_name() const;
  public:
  void clear_sender_host_name();
  const std::string& sender_host_name() const;
  void set_sender_host_name(const std::string& value);
  void set_sender_host_name(std::string&& value);
  void set_sender_host_name(const char* value);
  void set_sender_host_name(const char* value, size_t size);
  std::string* mutable_sender_host_name();
  std::string* release_sender_host_name();
  void set_allocated_sender_host_name(std::string* sender_host_name);
  private:
  const std::string& _internal_sender_host_name() const;
  void _internal_set_sender_host_name(const std::string& value);
  std::string* _internal_mutable_sender_host_name();
  public:

  // required string sender_name = 3;
  bool has_sender_name() const;
  private:
  bool _internal_has_sender_name() const;
  public:
  void clear_sender_name();
  const std::string& sender_name() const;
  void set_sender_name(const std::string& value);
  void set_sender_name(std::string&& value);
  void set_sender_name(const char* value);
  void set_sender_name(const char* value, size_t size);
  std::string* mutable_sender_name();
  std::string* release_sender_name();
  void set_allocated_sender_name(std::string* sender_name);
  private:
  const std::string& _internal_sender_name() const;
  void _internal_set_sender_name(const std::string& value);
  std::string* _internal_mutable_sender_name();
  public:

  // required string receiver_name = 4;
  bool has_receiver_name() const;
  private:
  bool _internal_has_receiver_name() const;
  public:
  void clear_receiver_name();
  const std::string& receiver_name() const;
  void set_receiver_name(const std::string& value);
  void set_receiver_name(std::string&& value);
  void set_receiver_name(const char* value);
  void set_receiver_name(const char* value, size_t size);
  std::string* mutable_receiver_name();
  std::string* release_receiver_name();
  void set_allocated_receiver_name(std::string* receiver_name);
  private:
  const std::string& _internal_receiver_name() const;
  void _internal_set_receiver_name(const std::string& value);
  std::string* _internal_mutable_receiver_name();
  public:

  // required string service_name = 5;
  bool has_service_name() const;
  private:
  bool _internal_has_service_name() const;
  public:
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // required int32 logger_pid = 1;
  bool has_logger_pid() const;
  private:
  bool _internal_has_logger_pid() const;
  public:
  void clear_logger_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 logger_pid() const;
  void set_logger_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_logger_pid() const;
  void _internal_set_logger_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .NFdbBase.FdbMessageType type = 6;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::NFdbBase::FdbMessageType type() const;
  void set_type(::NFdbBase::FdbMessageType value);
  private:
  ::NFdbBase::FdbMessageType _internal_type() const;
  void _internal_set_type(::NFdbBase::FdbMessageType value);
  public:

  // required int32 code = 7;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 serial_number = 8;
  bool has_serial_number() const;
  private:
  bool _internal_has_serial_number() const;
  public:
  void clear_serial_number();
  ::PROTOBUF_NAMESPACE_ID::int32 serial_number() const;
  void set_serial_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serial_number() const;
  void _internal_set_serial_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int64 time_stamp = 9;
  bool has_time_stamp() const;
  private:
  bool _internal_has_time_stamp() const;
  public:
  void clear_time_stamp();
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp() const;
  void set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_stamp() const;
  void _internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required bool is_string = 10;
  bool has_is_string() const;
  private:
  bool _internal_has_is_string() const;
  public:
  void clear_is_string();
  bool is_string() const;
  void set_is_string(bool value);
  private:
  bool _internal_is_string() const;
  void _internal_set_is_string(bool value);
  public:

  // required int32 msg_payload_size = 11;
  bool has_msg_payload_size() const;
  private:
  bool _internal_has_msg_payload_size() const;
  public:
  void clear_msg_payload_size();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_payload_size() const;
  void set_msg_payload_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_payload_size() const;
  void _internal_set_msg_payload_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 object_id = 12;
  bool has_object_id() const;
  private:
  bool _internal_has_object_id() const;
  public:
  void clear_object_id();
  ::PROTOBUF_NAMESPACE_ID::int32 object_id() const;
  void set_object_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_object_id() const;
  void _internal_set_object_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:NFdbBase.FdbLogProducerData)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_host_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 logger_pid_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  ::PROTOBUF_NAMESPACE_ID::int32 serial_number_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp_;
  bool is_string_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_payload_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 object_id_;
  friend struct ::TableStruct_common_2ebase_2eMessageHeader_2eproto;
};
// -------------------------------------------------------------------

class FdbTraceProducerData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:NFdbBase.FdbTraceProducerData) */ {
 public:
  FdbTraceProducerData();
  virtual ~FdbTraceProducerData();

  FdbTraceProducerData(const FdbTraceProducerData& from);
  FdbTraceProducerData(FdbTraceProducerData&& from) noexcept
    : FdbTraceProducerData() {
    *this = ::std::move(from);
  }

  inline FdbTraceProducerData& operator=(const FdbTraceProducerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FdbTraceProducerData& operator=(FdbTraceProducerData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FdbTraceProducerData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FdbTraceProducerData* internal_default_instance() {
    return reinterpret_cast<const FdbTraceProducerData*>(
               &_FdbTraceProducerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FdbTraceProducerData& a, FdbTraceProducerData& b) {
    a.Swap(&b);
  }
  inline void Swap(FdbTraceProducerData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FdbTraceProducerData* New() const final {
    return CreateMaybeMessage<FdbTraceProducerData>(nullptr);
  }

  FdbTraceProducerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FdbTraceProducerData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FdbTraceProducerData& from);
  void MergeFrom(const FdbTraceProducerData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FdbTraceProducerData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFdbBase.FdbTraceProducerData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderHostNameFieldNumber = 2,
    kTagFieldNumber = 3,
    kTracePidFieldNumber = 1,
    kTraceLevelFieldNumber = 5,
    kTimeStampFieldNumber = 4,
  };
  // required string sender_host_name = 2;
  bool has_sender_host_name() const;
  private:
  bool _internal_has_sender_host_name() const;
  public:
  void clear_sender_host_name();
  const std::string& sender_host_name() const;
  void set_sender_host_name(const std::string& value);
  void set_sender_host_name(std::string&& value);
  void set_sender_host_name(const char* value);
  void set_sender_host_name(const char* value, size_t size);
  std::string* mutable_sender_host_name();
  std::string* release_sender_host_name();
  void set_allocated_sender_host_name(std::string* sender_host_name);
  private:
  const std::string& _internal_sender_host_name() const;
  void _internal_set_sender_host_name(const std::string& value);
  std::string* _internal_mutable_sender_host_name();
  public:

  // required string tag = 3;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // required int32 trace_pid = 1;
  bool has_trace_pid() const;
  private:
  bool _internal_has_trace_pid() const;
  public:
  void clear_trace_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 trace_pid() const;
  void set_trace_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_trace_pid() const;
  void _internal_set_trace_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .NFdbBase.FdbTraceLogLevel trace_level = 5;
  bool has_trace_level() const;
  private:
  bool _internal_has_trace_level() const;
  public:
  void clear_trace_level();
  ::NFdbBase::FdbTraceLogLevel trace_level() const;
  void set_trace_level(::NFdbBase::FdbTraceLogLevel value);
  private:
  ::NFdbBase::FdbTraceLogLevel _internal_trace_level() const;
  void _internal_set_trace_level(::NFdbBase::FdbTraceLogLevel value);
  public:

  // required int64 time_stamp = 4;
  bool has_time_stamp() const;
  private:
  bool _internal_has_time_stamp() const;
  public:
  void clear_time_stamp();
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp() const;
  void set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_stamp() const;
  void _internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:NFdbBase.FdbTraceProducerData)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_host_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::PROTOBUF_NAMESPACE_ID::int32 trace_pid_;
  int trace_level_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp_;
  friend struct ::TableStruct_common_2ebase_2eMessageHeader_2eproto;
};
// -------------------------------------------------------------------

class FdbMsgLogConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:NFdbBase.FdbMsgLogConfig) */ {
 public:
  FdbMsgLogConfig();
  virtual ~FdbMsgLogConfig();

  FdbMsgLogConfig(const FdbMsgLogConfig& from);
  FdbMsgLogConfig(FdbMsgLogConfig&& from) noexcept
    : FdbMsgLogConfig() {
    *this = ::std::move(from);
  }

  inline FdbMsgLogConfig& operator=(const FdbMsgLogConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline FdbMsgLogConfig& operator=(FdbMsgLogConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FdbMsgLogConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FdbMsgLogConfig* internal_default_instance() {
    return reinterpret_cast<const FdbMsgLogConfig*>(
               &_FdbMsgLogConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FdbMsgLogConfig& a, FdbMsgLogConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(FdbMsgLogConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FdbMsgLogConfig* New() const final {
    return CreateMaybeMessage<FdbMsgLogConfig>(nullptr);
  }

  FdbMsgLogConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FdbMsgLogConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FdbMsgLogConfig& from);
  void MergeFrom(const FdbMsgLogConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FdbMsgLogConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFdbBase.FdbMsgLogConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostWhileListFieldNumber = 7,
    kEndpointWhileListFieldNumber = 8,
    kGlobalEnableFieldNumber = 1,
    kEnableRequestFieldNumber = 2,
    kEnableReplyFieldNumber = 3,
    kEnableBroadcastFieldNumber = 4,
    kEnableSubscribeFieldNumber = 5,
    kRawDataClippingSizeFieldNumber = 6,
  };
  // repeated string host_while_list = 7;
  int host_while_list_size() const;
  private:
  int _internal_host_while_list_size() const;
  public:
  void clear_host_while_list();
  const std::string& host_while_list(int index) const;
  std::string* mutable_host_while_list(int index);
  void set_host_while_list(int index, const std::string& value);
  void set_host_while_list(int index, std::string&& value);
  void set_host_while_list(int index, const char* value);
  void set_host_while_list(int index, const char* value, size_t size);
  std::string* add_host_while_list();
  void add_host_while_list(const std::string& value);
  void add_host_while_list(std::string&& value);
  void add_host_while_list(const char* value);
  void add_host_while_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& host_while_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_host_while_list();
  private:
  const std::string& _internal_host_while_list(int index) const;
  std::string* _internal_add_host_while_list();
  public:

  // repeated string endpoint_while_list = 8;
  int endpoint_while_list_size() const;
  private:
  int _internal_endpoint_while_list_size() const;
  public:
  void clear_endpoint_while_list();
  const std::string& endpoint_while_list(int index) const;
  std::string* mutable_endpoint_while_list(int index);
  void set_endpoint_while_list(int index, const std::string& value);
  void set_endpoint_while_list(int index, std::string&& value);
  void set_endpoint_while_list(int index, const char* value);
  void set_endpoint_while_list(int index, const char* value, size_t size);
  std::string* add_endpoint_while_list();
  void add_endpoint_while_list(const std::string& value);
  void add_endpoint_while_list(std::string&& value);
  void add_endpoint_while_list(const char* value);
  void add_endpoint_while_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& endpoint_while_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_endpoint_while_list();
  private:
  const std::string& _internal_endpoint_while_list(int index) const;
  std::string* _internal_add_endpoint_while_list();
  public:

  // required bool global_enable = 1;
  bool has_global_enable() const;
  private:
  bool _internal_has_global_enable() const;
  public:
  void clear_global_enable();
  bool global_enable() const;
  void set_global_enable(bool value);
  private:
  bool _internal_global_enable() const;
  void _internal_set_global_enable(bool value);
  public:

  // required bool enable_request = 2;
  bool has_enable_request() const;
  private:
  bool _internal_has_enable_request() const;
  public:
  void clear_enable_request();
  bool enable_request() const;
  void set_enable_request(bool value);
  private:
  bool _internal_enable_request() const;
  void _internal_set_enable_request(bool value);
  public:

  // required bool enable_reply = 3;
  bool has_enable_reply() const;
  private:
  bool _internal_has_enable_reply() const;
  public:
  void clear_enable_reply();
  bool enable_reply() const;
  void set_enable_reply(bool value);
  private:
  bool _internal_enable_reply() const;
  void _internal_set_enable_reply(bool value);
  public:

  // required bool enable_broadcast = 4;
  bool has_enable_broadcast() const;
  private:
  bool _internal_has_enable_broadcast() const;
  public:
  void clear_enable_broadcast();
  bool enable_broadcast() const;
  void set_enable_broadcast(bool value);
  private:
  bool _internal_enable_broadcast() const;
  void _internal_set_enable_broadcast(bool value);
  public:

  // required bool enable_subscribe = 5;
  bool has_enable_subscribe() const;
  private:
  bool _internal_has_enable_subscribe() const;
  public:
  void clear_enable_subscribe();
  bool enable_subscribe() const;
  void set_enable_subscribe(bool value);
  private:
  bool _internal_enable_subscribe() const;
  void _internal_set_enable_subscribe(bool value);
  public:

  // required int32 raw_data_clipping_size = 6;
  bool has_raw_data_clipping_size() const;
  private:
  bool _internal_has_raw_data_clipping_size() const;
  public:
  void clear_raw_data_clipping_size();
  ::PROTOBUF_NAMESPACE_ID::int32 raw_data_clipping_size() const;
  void set_raw_data_clipping_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_raw_data_clipping_size() const;
  void _internal_set_raw_data_clipping_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:NFdbBase.FdbMsgLogConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> host_while_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> endpoint_while_list_;
  bool global_enable_;
  bool enable_request_;
  bool enable_reply_;
  bool enable_broadcast_;
  bool enable_subscribe_;
  ::PROTOBUF_NAMESPACE_ID::int32 raw_data_clipping_size_;
  friend struct ::TableStruct_common_2ebase_2eMessageHeader_2eproto;
};
// -------------------------------------------------------------------

class FdbTraceConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:NFdbBase.FdbTraceConfig) */ {
 public:
  FdbTraceConfig();
  virtual ~FdbTraceConfig();

  FdbTraceConfig(const FdbTraceConfig& from);
  FdbTraceConfig(FdbTraceConfig&& from) noexcept
    : FdbTraceConfig() {
    *this = ::std::move(from);
  }

  inline FdbTraceConfig& operator=(const FdbTraceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline FdbTraceConfig& operator=(FdbTraceConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FdbTraceConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FdbTraceConfig* internal_default_instance() {
    return reinterpret_cast<const FdbTraceConfig*>(
               &_FdbTraceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(FdbTraceConfig& a, FdbTraceConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(FdbTraceConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FdbTraceConfig* New() const final {
    return CreateMaybeMessage<FdbTraceConfig>(nullptr);
  }

  FdbTraceConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FdbTraceConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FdbTraceConfig& from);
  void MergeFrom(const FdbTraceConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FdbTraceConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFdbBase.FdbTraceConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostWhileListFieldNumber = 7,
    kTagWhileListFieldNumber = 8,
    kGlobalEnableFieldNumber = 1,
    kLogLevelFieldNumber = 2,
  };
  // repeated string host_while_list = 7;
  int host_while_list_size() const;
  private:
  int _internal_host_while_list_size() const;
  public:
  void clear_host_while_list();
  const std::string& host_while_list(int index) const;
  std::string* mutable_host_while_list(int index);
  void set_host_while_list(int index, const std::string& value);
  void set_host_while_list(int index, std::string&& value);
  void set_host_while_list(int index, const char* value);
  void set_host_while_list(int index, const char* value, size_t size);
  std::string* add_host_while_list();
  void add_host_while_list(const std::string& value);
  void add_host_while_list(std::string&& value);
  void add_host_while_list(const char* value);
  void add_host_while_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& host_while_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_host_while_list();
  private:
  const std::string& _internal_host_while_list(int index) const;
  std::string* _internal_add_host_while_list();
  public:

  // repeated string tag_while_list = 8;
  int tag_while_list_size() const;
  private:
  int _internal_tag_while_list_size() const;
  public:
  void clear_tag_while_list();
  const std::string& tag_while_list(int index) const;
  std::string* mutable_tag_while_list(int index);
  void set_tag_while_list(int index, const std::string& value);
  void set_tag_while_list(int index, std::string&& value);
  void set_tag_while_list(int index, const char* value);
  void set_tag_while_list(int index, const char* value, size_t size);
  std::string* add_tag_while_list();
  void add_tag_while_list(const std::string& value);
  void add_tag_while_list(std::string&& value);
  void add_tag_while_list(const char* value);
  void add_tag_while_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tag_while_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tag_while_list();
  private:
  const std::string& _internal_tag_while_list(int index) const;
  std::string* _internal_add_tag_while_list();
  public:

  // required bool global_enable = 1;
  bool has_global_enable() const;
  private:
  bool _internal_has_global_enable() const;
  public:
  void clear_global_enable();
  bool global_enable() const;
  void set_global_enable(bool value);
  private:
  bool _internal_global_enable() const;
  void _internal_set_global_enable(bool value);
  public:

  // required .NFdbBase.FdbTraceLogLevel log_level = 2;
  bool has_log_level() const;
  private:
  bool _internal_has_log_level() const;
  public:
  void clear_log_level();
  ::NFdbBase::FdbTraceLogLevel log_level() const;
  void set_log_level(::NFdbBase::FdbTraceLogLevel value);
  private:
  ::NFdbBase::FdbTraceLogLevel _internal_log_level() const;
  void _internal_set_log_level(::NFdbBase::FdbTraceLogLevel value);
  public:

  // @@protoc_insertion_point(class_scope:NFdbBase.FdbTraceConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> host_while_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tag_while_list_;
  bool global_enable_;
  int log_level_;
  friend struct ::TableStruct_common_2ebase_2eMessageHeader_2eproto;
};
// -------------------------------------------------------------------

class FdbAuthentication :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:NFdbBase.FdbAuthentication) */ {
 public:
  FdbAuthentication();
  virtual ~FdbAuthentication();

  FdbAuthentication(const FdbAuthentication& from);
  FdbAuthentication(FdbAuthentication&& from) noexcept
    : FdbAuthentication() {
    *this = ::std::move(from);
  }

  inline FdbAuthentication& operator=(const FdbAuthentication& from) {
    CopyFrom(from);
    return *this;
  }
  inline FdbAuthentication& operator=(FdbAuthentication&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FdbAuthentication& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FdbAuthentication* internal_default_instance() {
    return reinterpret_cast<const FdbAuthentication*>(
               &_FdbAuthentication_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(FdbAuthentication& a, FdbAuthentication& b) {
    a.Swap(&b);
  }
  inline void Swap(FdbAuthentication* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FdbAuthentication* New() const final {
    return CreateMaybeMessage<FdbAuthentication>(nullptr);
  }

  FdbAuthentication* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FdbAuthentication>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FdbAuthentication& from);
  void MergeFrom(const FdbAuthentication& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FdbAuthentication* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFdbBase.FdbAuthentication";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenListFieldNumber = 1,
  };
  // optional .NFdbBase.FdbMsgTokens token_list = 1;
  bool has_token_list() const;
  private:
  bool _internal_has_token_list() const;
  public:
  void clear_token_list();
  const ::NFdbBase::FdbMsgTokens& token_list() const;
  ::NFdbBase::FdbMsgTokens* release_token_list();
  ::NFdbBase::FdbMsgTokens* mutable_token_list();
  void set_allocated_token_list(::NFdbBase::FdbMsgTokens* token_list);
  private:
  const ::NFdbBase::FdbMsgTokens& _internal_token_list() const;
  ::NFdbBase::FdbMsgTokens* _internal_mutable_token_list();
  public:

  // @@protoc_insertion_point(class_scope:NFdbBase.FdbAuthentication)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::NFdbBase::FdbMsgTokens* token_list_;
  friend struct ::TableStruct_common_2ebase_2eMessageHeader_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FdbMessageHeader

// required .NFdbBase.FdbMessageType type = 1;
inline bool FdbMessageHeader::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FdbMessageHeader::has_type() const {
  return _internal_has_type();
}
inline void FdbMessageHeader::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::NFdbBase::FdbMessageType FdbMessageHeader::_internal_type() const {
  return static_cast< ::NFdbBase::FdbMessageType >(type_);
}
inline ::NFdbBase::FdbMessageType FdbMessageHeader::type() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMessageHeader.type)
  return _internal_type();
}
inline void FdbMessageHeader::_internal_set_type(::NFdbBase::FdbMessageType value) {
  assert(::NFdbBase::FdbMessageType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void FdbMessageHeader::set_type(::NFdbBase::FdbMessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMessageHeader.type)
}

// required int32 serial_number = 2;
inline bool FdbMessageHeader::_internal_has_serial_number() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FdbMessageHeader::has_serial_number() const {
  return _internal_has_serial_number();
}
inline void FdbMessageHeader::clear_serial_number() {
  serial_number_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FdbMessageHeader::_internal_serial_number() const {
  return serial_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FdbMessageHeader::serial_number() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMessageHeader.serial_number)
  return _internal_serial_number();
}
inline void FdbMessageHeader::_internal_set_serial_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  serial_number_ = value;
}
inline void FdbMessageHeader::set_serial_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serial_number(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMessageHeader.serial_number)
}

// required int32 code = 3;
inline bool FdbMessageHeader::_internal_has_code() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FdbMessageHeader::has_code() const {
  return _internal_has_code();
}
inline void FdbMessageHeader::clear_code() {
  code_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FdbMessageHeader::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FdbMessageHeader::code() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMessageHeader.code)
  return _internal_code();
}
inline void FdbMessageHeader::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  code_ = value;
}
inline void FdbMessageHeader::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMessageHeader.code)
}

// required uint32 flag = 4;
inline bool FdbMessageHeader::_internal_has_flag() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FdbMessageHeader::has_flag() const {
  return _internal_has_flag();
}
inline void FdbMessageHeader::clear_flag() {
  flag_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FdbMessageHeader::_internal_flag() const {
  return flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FdbMessageHeader::flag() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMessageHeader.flag)
  return _internal_flag();
}
inline void FdbMessageHeader::_internal_set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  flag_ = value;
}
inline void FdbMessageHeader::set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMessageHeader.flag)
}

// required uint32 object_id = 5;
inline bool FdbMessageHeader::_internal_has_object_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FdbMessageHeader::has_object_id() const {
  return _internal_has_object_id();
}
inline void FdbMessageHeader::clear_object_id() {
  object_id_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FdbMessageHeader::_internal_object_id() const {
  return object_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FdbMessageHeader::object_id() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMessageHeader.object_id)
  return _internal_object_id();
}
inline void FdbMessageHeader::_internal_set_object_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  object_id_ = value;
}
inline void FdbMessageHeader::set_object_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMessageHeader.object_id)
}

// required uint32 payload_size = 6;
inline bool FdbMessageHeader::_internal_has_payload_size() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FdbMessageHeader::has_payload_size() const {
  return _internal_has_payload_size();
}
inline void FdbMessageHeader::clear_payload_size() {
  payload_size_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FdbMessageHeader::_internal_payload_size() const {
  return payload_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FdbMessageHeader::payload_size() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMessageHeader.payload_size)
  return _internal_payload_size();
}
inline void FdbMessageHeader::_internal_set_payload_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  payload_size_ = value;
}
inline void FdbMessageHeader::set_payload_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_payload_size(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMessageHeader.payload_size)
}

// optional string sender_name = 7;
inline bool FdbMessageHeader::_internal_has_sender_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FdbMessageHeader::has_sender_name() const {
  return _internal_has_sender_name();
}
inline void FdbMessageHeader::clear_sender_name() {
  sender_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FdbMessageHeader::sender_name() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMessageHeader.sender_name)
  return _internal_sender_name();
}
inline void FdbMessageHeader::set_sender_name(const std::string& value) {
  _internal_set_sender_name(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMessageHeader.sender_name)
}
inline std::string* FdbMessageHeader::mutable_sender_name() {
  // @@protoc_insertion_point(field_mutable:NFdbBase.FdbMessageHeader.sender_name)
  return _internal_mutable_sender_name();
}
inline const std::string& FdbMessageHeader::_internal_sender_name() const {
  return sender_name_.GetNoArena();
}
inline void FdbMessageHeader::_internal_set_sender_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sender_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FdbMessageHeader::set_sender_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sender_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFdbBase.FdbMessageHeader.sender_name)
}
inline void FdbMessageHeader::set_sender_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sender_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFdbBase.FdbMessageHeader.sender_name)
}
inline void FdbMessageHeader::set_sender_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sender_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFdbBase.FdbMessageHeader.sender_name)
}
inline std::string* FdbMessageHeader::_internal_mutable_sender_name() {
  _has_bits_[0] |= 0x00000001u;
  return sender_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FdbMessageHeader::release_sender_name() {
  // @@protoc_insertion_point(field_release:NFdbBase.FdbMessageHeader.sender_name)
  if (!has_sender_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sender_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FdbMessageHeader::set_allocated_sender_name(std::string* sender_name) {
  if (sender_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sender_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_name);
  // @@protoc_insertion_point(field_set_allocated:NFdbBase.FdbMessageHeader.sender_name)
}

// optional string broadcast_filter = 8;
inline bool FdbMessageHeader::_internal_has_broadcast_filter() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FdbMessageHeader::has_broadcast_filter() const {
  return _internal_has_broadcast_filter();
}
inline void FdbMessageHeader::clear_broadcast_filter() {
  broadcast_filter_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FdbMessageHeader::broadcast_filter() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMessageHeader.broadcast_filter)
  return _internal_broadcast_filter();
}
inline void FdbMessageHeader::set_broadcast_filter(const std::string& value) {
  _internal_set_broadcast_filter(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMessageHeader.broadcast_filter)
}
inline std::string* FdbMessageHeader::mutable_broadcast_filter() {
  // @@protoc_insertion_point(field_mutable:NFdbBase.FdbMessageHeader.broadcast_filter)
  return _internal_mutable_broadcast_filter();
}
inline const std::string& FdbMessageHeader::_internal_broadcast_filter() const {
  return broadcast_filter_.GetNoArena();
}
inline void FdbMessageHeader::_internal_set_broadcast_filter(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  broadcast_filter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FdbMessageHeader::set_broadcast_filter(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  broadcast_filter_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFdbBase.FdbMessageHeader.broadcast_filter)
}
inline void FdbMessageHeader::set_broadcast_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  broadcast_filter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFdbBase.FdbMessageHeader.broadcast_filter)
}
inline void FdbMessageHeader::set_broadcast_filter(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  broadcast_filter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFdbBase.FdbMessageHeader.broadcast_filter)
}
inline std::string* FdbMessageHeader::_internal_mutable_broadcast_filter() {
  _has_bits_[0] |= 0x00000002u;
  return broadcast_filter_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FdbMessageHeader::release_broadcast_filter() {
  // @@protoc_insertion_point(field_release:NFdbBase.FdbMessageHeader.broadcast_filter)
  if (!has_broadcast_filter()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return broadcast_filter_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FdbMessageHeader::set_allocated_broadcast_filter(std::string* broadcast_filter) {
  if (broadcast_filter != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  broadcast_filter_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), broadcast_filter);
  // @@protoc_insertion_point(field_set_allocated:NFdbBase.FdbMessageHeader.broadcast_filter)
}

// optional uint64 send_or_arrive_time = 10;
inline bool FdbMessageHeader::_internal_has_send_or_arrive_time() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FdbMessageHeader::has_send_or_arrive_time() const {
  return _internal_has_send_or_arrive_time();
}
inline void FdbMessageHeader::clear_send_or_arrive_time() {
  send_or_arrive_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FdbMessageHeader::_internal_send_or_arrive_time() const {
  return send_or_arrive_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FdbMessageHeader::send_or_arrive_time() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMessageHeader.send_or_arrive_time)
  return _internal_send_or_arrive_time();
}
inline void FdbMessageHeader::_internal_set_send_or_arrive_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  send_or_arrive_time_ = value;
}
inline void FdbMessageHeader::set_send_or_arrive_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_send_or_arrive_time(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMessageHeader.send_or_arrive_time)
}

// optional uint64 reply_time = 11;
inline bool FdbMessageHeader::_internal_has_reply_time() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FdbMessageHeader::has_reply_time() const {
  return _internal_has_reply_time();
}
inline void FdbMessageHeader::clear_reply_time() {
  reply_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FdbMessageHeader::_internal_reply_time() const {
  return reply_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FdbMessageHeader::reply_time() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMessageHeader.reply_time)
  return _internal_reply_time();
}
inline void FdbMessageHeader::_internal_set_reply_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  reply_time_ = value;
}
inline void FdbMessageHeader::set_reply_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_reply_time(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMessageHeader.reply_time)
}

// -------------------------------------------------------------------

// FdbMsgSubscribeItem

// required int32 msg_code = 1;
inline bool FdbMsgSubscribeItem::_internal_has_msg_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FdbMsgSubscribeItem::has_msg_code() const {
  return _internal_has_msg_code();
}
inline void FdbMsgSubscribeItem::clear_msg_code() {
  msg_code_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FdbMsgSubscribeItem::_internal_msg_code() const {
  return msg_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FdbMsgSubscribeItem::msg_code() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMsgSubscribeItem.msg_code)
  return _internal_msg_code();
}
inline void FdbMsgSubscribeItem::_internal_set_msg_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  msg_code_ = value;
}
inline void FdbMsgSubscribeItem::set_msg_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_code(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMsgSubscribeItem.msg_code)
}

// optional string filter = 2;
inline bool FdbMsgSubscribeItem::_internal_has_filter() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FdbMsgSubscribeItem::has_filter() const {
  return _internal_has_filter();
}
inline void FdbMsgSubscribeItem::clear_filter() {
  filter_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FdbMsgSubscribeItem::filter() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMsgSubscribeItem.filter)
  return _internal_filter();
}
inline void FdbMsgSubscribeItem::set_filter(const std::string& value) {
  _internal_set_filter(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMsgSubscribeItem.filter)
}
inline std::string* FdbMsgSubscribeItem::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:NFdbBase.FdbMsgSubscribeItem.filter)
  return _internal_mutable_filter();
}
inline const std::string& FdbMsgSubscribeItem::_internal_filter() const {
  return filter_.GetNoArena();
}
inline void FdbMsgSubscribeItem::_internal_set_filter(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FdbMsgSubscribeItem::set_filter(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  filter_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFdbBase.FdbMsgSubscribeItem.filter)
}
inline void FdbMsgSubscribeItem::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  filter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFdbBase.FdbMsgSubscribeItem.filter)
}
inline void FdbMsgSubscribeItem::set_filter(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  filter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFdbBase.FdbMsgSubscribeItem.filter)
}
inline std::string* FdbMsgSubscribeItem::_internal_mutable_filter() {
  _has_bits_[0] |= 0x00000001u;
  return filter_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FdbMsgSubscribeItem::release_filter() {
  // @@protoc_insertion_point(field_release:NFdbBase.FdbMsgSubscribeItem.filter)
  if (!has_filter()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return filter_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FdbMsgSubscribeItem::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filter_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:NFdbBase.FdbMsgSubscribeItem.filter)
}

// optional .NFdbBase.FdbSubscribeType type = 3;
inline bool FdbMsgSubscribeItem::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FdbMsgSubscribeItem::has_type() const {
  return _internal_has_type();
}
inline void FdbMsgSubscribeItem::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::NFdbBase::FdbSubscribeType FdbMsgSubscribeItem::_internal_type() const {
  return static_cast< ::NFdbBase::FdbSubscribeType >(type_);
}
inline ::NFdbBase::FdbSubscribeType FdbMsgSubscribeItem::type() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMsgSubscribeItem.type)
  return _internal_type();
}
inline void FdbMsgSubscribeItem::_internal_set_type(::NFdbBase::FdbSubscribeType value) {
  assert(::NFdbBase::FdbSubscribeType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void FdbMsgSubscribeItem::set_type(::NFdbBase::FdbSubscribeType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMsgSubscribeItem.type)
}

// -------------------------------------------------------------------

// FdbMsgSubscribe

// repeated .NFdbBase.FdbMsgSubscribeItem notify_list = 1;
inline int FdbMsgSubscribe::_internal_notify_list_size() const {
  return notify_list_.size();
}
inline int FdbMsgSubscribe::notify_list_size() const {
  return _internal_notify_list_size();
}
inline void FdbMsgSubscribe::clear_notify_list() {
  notify_list_.Clear();
}
inline ::NFdbBase::FdbMsgSubscribeItem* FdbMsgSubscribe::mutable_notify_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFdbBase.FdbMsgSubscribe.notify_list)
  return notify_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFdbBase::FdbMsgSubscribeItem >*
FdbMsgSubscribe::mutable_notify_list() {
  // @@protoc_insertion_point(field_mutable_list:NFdbBase.FdbMsgSubscribe.notify_list)
  return &notify_list_;
}
inline const ::NFdbBase::FdbMsgSubscribeItem& FdbMsgSubscribe::_internal_notify_list(int index) const {
  return notify_list_.Get(index);
}
inline const ::NFdbBase::FdbMsgSubscribeItem& FdbMsgSubscribe::notify_list(int index) const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMsgSubscribe.notify_list)
  return _internal_notify_list(index);
}
inline ::NFdbBase::FdbMsgSubscribeItem* FdbMsgSubscribe::_internal_add_notify_list() {
  return notify_list_.Add();
}
inline ::NFdbBase::FdbMsgSubscribeItem* FdbMsgSubscribe::add_notify_list() {
  // @@protoc_insertion_point(field_add:NFdbBase.FdbMsgSubscribe.notify_list)
  return _internal_add_notify_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFdbBase::FdbMsgSubscribeItem >&
FdbMsgSubscribe::notify_list() const {
  // @@protoc_insertion_point(field_list:NFdbBase.FdbMsgSubscribe.notify_list)
  return notify_list_;
}

// -------------------------------------------------------------------

// FdbMsgErrorInfo

// required int32 error_code = 1;
inline bool FdbMsgErrorInfo::_internal_has_error_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FdbMsgErrorInfo::has_error_code() const {
  return _internal_has_error_code();
}
inline void FdbMsgErrorInfo::clear_error_code() {
  error_code_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FdbMsgErrorInfo::_internal_error_code() const {
  return error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FdbMsgErrorInfo::error_code() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMsgErrorInfo.error_code)
  return _internal_error_code();
}
inline void FdbMsgErrorInfo::_internal_set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  error_code_ = value;
}
inline void FdbMsgErrorInfo::set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMsgErrorInfo.error_code)
}

// optional string description = 2;
inline bool FdbMsgErrorInfo::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FdbMsgErrorInfo::has_description() const {
  return _internal_has_description();
}
inline void FdbMsgErrorInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FdbMsgErrorInfo::description() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMsgErrorInfo.description)
  return _internal_description();
}
inline void FdbMsgErrorInfo::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMsgErrorInfo.description)
}
inline std::string* FdbMsgErrorInfo::mutable_description() {
  // @@protoc_insertion_point(field_mutable:NFdbBase.FdbMsgErrorInfo.description)
  return _internal_mutable_description();
}
inline const std::string& FdbMsgErrorInfo::_internal_description() const {
  return description_.GetNoArena();
}
inline void FdbMsgErrorInfo::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FdbMsgErrorInfo::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFdbBase.FdbMsgErrorInfo.description)
}
inline void FdbMsgErrorInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFdbBase.FdbMsgErrorInfo.description)
}
inline void FdbMsgErrorInfo::set_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFdbBase.FdbMsgErrorInfo.description)
}
inline std::string* FdbMsgErrorInfo::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000001u;
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FdbMsgErrorInfo::release_description() {
  // @@protoc_insertion_point(field_release:NFdbBase.FdbMsgErrorInfo.description)
  if (!has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return description_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FdbMsgErrorInfo::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:NFdbBase.FdbMsgErrorInfo.description)
}

// -------------------------------------------------------------------

// FdbMsgObjectInfo

// required uint32 obj_id = 1;
inline bool FdbMsgObjectInfo::_internal_has_obj_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FdbMsgObjectInfo::has_obj_id() const {
  return _internal_has_obj_id();
}
inline void FdbMsgObjectInfo::clear_obj_id() {
  obj_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FdbMsgObjectInfo::_internal_obj_id() const {
  return obj_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FdbMsgObjectInfo::obj_id() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMsgObjectInfo.obj_id)
  return _internal_obj_id();
}
inline void FdbMsgObjectInfo::_internal_set_obj_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  obj_id_ = value;
}
inline void FdbMsgObjectInfo::set_obj_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_obj_id(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMsgObjectInfo.obj_id)
}

// optional string obj_name = 2;
inline bool FdbMsgObjectInfo::_internal_has_obj_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FdbMsgObjectInfo::has_obj_name() const {
  return _internal_has_obj_name();
}
inline void FdbMsgObjectInfo::clear_obj_name() {
  obj_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FdbMsgObjectInfo::obj_name() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMsgObjectInfo.obj_name)
  return _internal_obj_name();
}
inline void FdbMsgObjectInfo::set_obj_name(const std::string& value) {
  _internal_set_obj_name(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMsgObjectInfo.obj_name)
}
inline std::string* FdbMsgObjectInfo::mutable_obj_name() {
  // @@protoc_insertion_point(field_mutable:NFdbBase.FdbMsgObjectInfo.obj_name)
  return _internal_mutable_obj_name();
}
inline const std::string& FdbMsgObjectInfo::_internal_obj_name() const {
  return obj_name_.GetNoArena();
}
inline void FdbMsgObjectInfo::_internal_set_obj_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  obj_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FdbMsgObjectInfo::set_obj_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  obj_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFdbBase.FdbMsgObjectInfo.obj_name)
}
inline void FdbMsgObjectInfo::set_obj_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  obj_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFdbBase.FdbMsgObjectInfo.obj_name)
}
inline void FdbMsgObjectInfo::set_obj_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  obj_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFdbBase.FdbMsgObjectInfo.obj_name)
}
inline std::string* FdbMsgObjectInfo::_internal_mutable_obj_name() {
  _has_bits_[0] |= 0x00000001u;
  return obj_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FdbMsgObjectInfo::release_obj_name() {
  // @@protoc_insertion_point(field_release:NFdbBase.FdbMsgObjectInfo.obj_name)
  if (!has_obj_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return obj_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FdbMsgObjectInfo::set_allocated_obj_name(std::string* obj_name) {
  if (obj_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  obj_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), obj_name);
  // @@protoc_insertion_point(field_set_allocated:NFdbBase.FdbMsgObjectInfo.obj_name)
}

// -------------------------------------------------------------------

// FdbMsgObjectInfoTbl

// repeated .NFdbBase.FdbMsgObjectInfo info = 1;
inline int FdbMsgObjectInfoTbl::_internal_info_size() const {
  return info_.size();
}
inline int FdbMsgObjectInfoTbl::info_size() const {
  return _internal_info_size();
}
inline void FdbMsgObjectInfoTbl::clear_info() {
  info_.Clear();
}
inline ::NFdbBase::FdbMsgObjectInfo* FdbMsgObjectInfoTbl::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:NFdbBase.FdbMsgObjectInfoTbl.info)
  return info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFdbBase::FdbMsgObjectInfo >*
FdbMsgObjectInfoTbl::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:NFdbBase.FdbMsgObjectInfoTbl.info)
  return &info_;
}
inline const ::NFdbBase::FdbMsgObjectInfo& FdbMsgObjectInfoTbl::_internal_info(int index) const {
  return info_.Get(index);
}
inline const ::NFdbBase::FdbMsgObjectInfo& FdbMsgObjectInfoTbl::info(int index) const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMsgObjectInfoTbl.info)
  return _internal_info(index);
}
inline ::NFdbBase::FdbMsgObjectInfo* FdbMsgObjectInfoTbl::_internal_add_info() {
  return info_.Add();
}
inline ::NFdbBase::FdbMsgObjectInfo* FdbMsgObjectInfoTbl::add_info() {
  // @@protoc_insertion_point(field_add:NFdbBase.FdbMsgObjectInfoTbl.info)
  return _internal_add_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFdbBase::FdbMsgObjectInfo >&
FdbMsgObjectInfoTbl::info() const {
  // @@protoc_insertion_point(field_list:NFdbBase.FdbMsgObjectInfoTbl.info)
  return info_;
}

// -------------------------------------------------------------------

// FdbLogProducerData

// required int32 logger_pid = 1;
inline bool FdbLogProducerData::_internal_has_logger_pid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FdbLogProducerData::has_logger_pid() const {
  return _internal_has_logger_pid();
}
inline void FdbLogProducerData::clear_logger_pid() {
  logger_pid_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FdbLogProducerData::_internal_logger_pid() const {
  return logger_pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FdbLogProducerData::logger_pid() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbLogProducerData.logger_pid)
  return _internal_logger_pid();
}
inline void FdbLogProducerData::_internal_set_logger_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  logger_pid_ = value;
}
inline void FdbLogProducerData::set_logger_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_logger_pid(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbLogProducerData.logger_pid)
}

// required string sender_host_name = 2;
inline bool FdbLogProducerData::_internal_has_sender_host_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FdbLogProducerData::has_sender_host_name() const {
  return _internal_has_sender_host_name();
}
inline void FdbLogProducerData::clear_sender_host_name() {
  sender_host_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FdbLogProducerData::sender_host_name() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbLogProducerData.sender_host_name)
  return _internal_sender_host_name();
}
inline void FdbLogProducerData::set_sender_host_name(const std::string& value) {
  _internal_set_sender_host_name(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbLogProducerData.sender_host_name)
}
inline std::string* FdbLogProducerData::mutable_sender_host_name() {
  // @@protoc_insertion_point(field_mutable:NFdbBase.FdbLogProducerData.sender_host_name)
  return _internal_mutable_sender_host_name();
}
inline const std::string& FdbLogProducerData::_internal_sender_host_name() const {
  return sender_host_name_.GetNoArena();
}
inline void FdbLogProducerData::_internal_set_sender_host_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sender_host_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FdbLogProducerData::set_sender_host_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sender_host_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFdbBase.FdbLogProducerData.sender_host_name)
}
inline void FdbLogProducerData::set_sender_host_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sender_host_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFdbBase.FdbLogProducerData.sender_host_name)
}
inline void FdbLogProducerData::set_sender_host_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sender_host_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFdbBase.FdbLogProducerData.sender_host_name)
}
inline std::string* FdbLogProducerData::_internal_mutable_sender_host_name() {
  _has_bits_[0] |= 0x00000001u;
  return sender_host_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FdbLogProducerData::release_sender_host_name() {
  // @@protoc_insertion_point(field_release:NFdbBase.FdbLogProducerData.sender_host_name)
  if (!has_sender_host_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sender_host_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FdbLogProducerData::set_allocated_sender_host_name(std::string* sender_host_name) {
  if (sender_host_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sender_host_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_host_name);
  // @@protoc_insertion_point(field_set_allocated:NFdbBase.FdbLogProducerData.sender_host_name)
}

// required string sender_name = 3;
inline bool FdbLogProducerData::_internal_has_sender_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FdbLogProducerData::has_sender_name() const {
  return _internal_has_sender_name();
}
inline void FdbLogProducerData::clear_sender_name() {
  sender_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FdbLogProducerData::sender_name() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbLogProducerData.sender_name)
  return _internal_sender_name();
}
inline void FdbLogProducerData::set_sender_name(const std::string& value) {
  _internal_set_sender_name(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbLogProducerData.sender_name)
}
inline std::string* FdbLogProducerData::mutable_sender_name() {
  // @@protoc_insertion_point(field_mutable:NFdbBase.FdbLogProducerData.sender_name)
  return _internal_mutable_sender_name();
}
inline const std::string& FdbLogProducerData::_internal_sender_name() const {
  return sender_name_.GetNoArena();
}
inline void FdbLogProducerData::_internal_set_sender_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sender_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FdbLogProducerData::set_sender_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  sender_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFdbBase.FdbLogProducerData.sender_name)
}
inline void FdbLogProducerData::set_sender_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  sender_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFdbBase.FdbLogProducerData.sender_name)
}
inline void FdbLogProducerData::set_sender_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  sender_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFdbBase.FdbLogProducerData.sender_name)
}
inline std::string* FdbLogProducerData::_internal_mutable_sender_name() {
  _has_bits_[0] |= 0x00000002u;
  return sender_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FdbLogProducerData::release_sender_name() {
  // @@protoc_insertion_point(field_release:NFdbBase.FdbLogProducerData.sender_name)
  if (!has_sender_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return sender_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FdbLogProducerData::set_allocated_sender_name(std::string* sender_name) {
  if (sender_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sender_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_name);
  // @@protoc_insertion_point(field_set_allocated:NFdbBase.FdbLogProducerData.sender_name)
}

// required string receiver_name = 4;
inline bool FdbLogProducerData::_internal_has_receiver_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FdbLogProducerData::has_receiver_name() const {
  return _internal_has_receiver_name();
}
inline void FdbLogProducerData::clear_receiver_name() {
  receiver_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& FdbLogProducerData::receiver_name() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbLogProducerData.receiver_name)
  return _internal_receiver_name();
}
inline void FdbLogProducerData::set_receiver_name(const std::string& value) {
  _internal_set_receiver_name(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbLogProducerData.receiver_name)
}
inline std::string* FdbLogProducerData::mutable_receiver_name() {
  // @@protoc_insertion_point(field_mutable:NFdbBase.FdbLogProducerData.receiver_name)
  return _internal_mutable_receiver_name();
}
inline const std::string& FdbLogProducerData::_internal_receiver_name() const {
  return receiver_name_.GetNoArena();
}
inline void FdbLogProducerData::_internal_set_receiver_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  receiver_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FdbLogProducerData::set_receiver_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  receiver_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFdbBase.FdbLogProducerData.receiver_name)
}
inline void FdbLogProducerData::set_receiver_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  receiver_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFdbBase.FdbLogProducerData.receiver_name)
}
inline void FdbLogProducerData::set_receiver_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  receiver_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFdbBase.FdbLogProducerData.receiver_name)
}
inline std::string* FdbLogProducerData::_internal_mutable_receiver_name() {
  _has_bits_[0] |= 0x00000004u;
  return receiver_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FdbLogProducerData::release_receiver_name() {
  // @@protoc_insertion_point(field_release:NFdbBase.FdbLogProducerData.receiver_name)
  if (!has_receiver_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return receiver_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FdbLogProducerData::set_allocated_receiver_name(std::string* receiver_name) {
  if (receiver_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  receiver_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receiver_name);
  // @@protoc_insertion_point(field_set_allocated:NFdbBase.FdbLogProducerData.receiver_name)
}

// required string service_name = 5;
inline bool FdbLogProducerData::_internal_has_service_name() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FdbLogProducerData::has_service_name() const {
  return _internal_has_service_name();
}
inline void FdbLogProducerData::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& FdbLogProducerData::service_name() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbLogProducerData.service_name)
  return _internal_service_name();
}
inline void FdbLogProducerData::set_service_name(const std::string& value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbLogProducerData.service_name)
}
inline std::string* FdbLogProducerData::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:NFdbBase.FdbLogProducerData.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& FdbLogProducerData::_internal_service_name() const {
  return service_name_.GetNoArena();
}
inline void FdbLogProducerData::_internal_set_service_name(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FdbLogProducerData::set_service_name(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  service_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFdbBase.FdbLogProducerData.service_name)
}
inline void FdbLogProducerData::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFdbBase.FdbLogProducerData.service_name)
}
inline void FdbLogProducerData::set_service_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFdbBase.FdbLogProducerData.service_name)
}
inline std::string* FdbLogProducerData::_internal_mutable_service_name() {
  _has_bits_[0] |= 0x00000008u;
  return service_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FdbLogProducerData::release_service_name() {
  // @@protoc_insertion_point(field_release:NFdbBase.FdbLogProducerData.service_name)
  if (!has_service_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return service_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FdbLogProducerData::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  service_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:NFdbBase.FdbLogProducerData.service_name)
}

// required .NFdbBase.FdbMessageType type = 6;
inline bool FdbLogProducerData::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FdbLogProducerData::has_type() const {
  return _internal_has_type();
}
inline void FdbLogProducerData::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::NFdbBase::FdbMessageType FdbLogProducerData::_internal_type() const {
  return static_cast< ::NFdbBase::FdbMessageType >(type_);
}
inline ::NFdbBase::FdbMessageType FdbLogProducerData::type() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbLogProducerData.type)
  return _internal_type();
}
inline void FdbLogProducerData::_internal_set_type(::NFdbBase::FdbMessageType value) {
  assert(::NFdbBase::FdbMessageType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  type_ = value;
}
inline void FdbLogProducerData::set_type(::NFdbBase::FdbMessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbLogProducerData.type)
}

// required int32 code = 7;
inline bool FdbLogProducerData::_internal_has_code() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FdbLogProducerData::has_code() const {
  return _internal_has_code();
}
inline void FdbLogProducerData::clear_code() {
  code_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FdbLogProducerData::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FdbLogProducerData::code() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbLogProducerData.code)
  return _internal_code();
}
inline void FdbLogProducerData::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  code_ = value;
}
inline void FdbLogProducerData::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbLogProducerData.code)
}

// required int32 serial_number = 8;
inline bool FdbLogProducerData::_internal_has_serial_number() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FdbLogProducerData::has_serial_number() const {
  return _internal_has_serial_number();
}
inline void FdbLogProducerData::clear_serial_number() {
  serial_number_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FdbLogProducerData::_internal_serial_number() const {
  return serial_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FdbLogProducerData::serial_number() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbLogProducerData.serial_number)
  return _internal_serial_number();
}
inline void FdbLogProducerData::_internal_set_serial_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  serial_number_ = value;
}
inline void FdbLogProducerData::set_serial_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serial_number(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbLogProducerData.serial_number)
}

// required int64 time_stamp = 9;
inline bool FdbLogProducerData::_internal_has_time_stamp() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FdbLogProducerData::has_time_stamp() const {
  return _internal_has_time_stamp();
}
inline void FdbLogProducerData::clear_time_stamp() {
  time_stamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FdbLogProducerData::_internal_time_stamp() const {
  return time_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FdbLogProducerData::time_stamp() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbLogProducerData.time_stamp)
  return _internal_time_stamp();
}
inline void FdbLogProducerData::_internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  time_stamp_ = value;
}
inline void FdbLogProducerData::set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbLogProducerData.time_stamp)
}

// required bool is_string = 10;
inline bool FdbLogProducerData::_internal_has_is_string() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FdbLogProducerData::has_is_string() const {
  return _internal_has_is_string();
}
inline void FdbLogProducerData::clear_is_string() {
  is_string_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool FdbLogProducerData::_internal_is_string() const {
  return is_string_;
}
inline bool FdbLogProducerData::is_string() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbLogProducerData.is_string)
  return _internal_is_string();
}
inline void FdbLogProducerData::_internal_set_is_string(bool value) {
  _has_bits_[0] |= 0x00000200u;
  is_string_ = value;
}
inline void FdbLogProducerData::set_is_string(bool value) {
  _internal_set_is_string(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbLogProducerData.is_string)
}

// required int32 msg_payload_size = 11;
inline bool FdbLogProducerData::_internal_has_msg_payload_size() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool FdbLogProducerData::has_msg_payload_size() const {
  return _internal_has_msg_payload_size();
}
inline void FdbLogProducerData::clear_msg_payload_size() {
  msg_payload_size_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FdbLogProducerData::_internal_msg_payload_size() const {
  return msg_payload_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FdbLogProducerData::msg_payload_size() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbLogProducerData.msg_payload_size)
  return _internal_msg_payload_size();
}
inline void FdbLogProducerData::_internal_set_msg_payload_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  msg_payload_size_ = value;
}
inline void FdbLogProducerData::set_msg_payload_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_payload_size(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbLogProducerData.msg_payload_size)
}

// required int32 object_id = 12;
inline bool FdbLogProducerData::_internal_has_object_id() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool FdbLogProducerData::has_object_id() const {
  return _internal_has_object_id();
}
inline void FdbLogProducerData::clear_object_id() {
  object_id_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FdbLogProducerData::_internal_object_id() const {
  return object_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FdbLogProducerData::object_id() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbLogProducerData.object_id)
  return _internal_object_id();
}
inline void FdbLogProducerData::_internal_set_object_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  object_id_ = value;
}
inline void FdbLogProducerData::set_object_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbLogProducerData.object_id)
}

// -------------------------------------------------------------------

// FdbTraceProducerData

// required int32 trace_pid = 1;
inline bool FdbTraceProducerData::_internal_has_trace_pid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FdbTraceProducerData::has_trace_pid() const {
  return _internal_has_trace_pid();
}
inline void FdbTraceProducerData::clear_trace_pid() {
  trace_pid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FdbTraceProducerData::_internal_trace_pid() const {
  return trace_pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FdbTraceProducerData::trace_pid() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbTraceProducerData.trace_pid)
  return _internal_trace_pid();
}
inline void FdbTraceProducerData::_internal_set_trace_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  trace_pid_ = value;
}
inline void FdbTraceProducerData::set_trace_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_trace_pid(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbTraceProducerData.trace_pid)
}

// required string sender_host_name = 2;
inline bool FdbTraceProducerData::_internal_has_sender_host_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FdbTraceProducerData::has_sender_host_name() const {
  return _internal_has_sender_host_name();
}
inline void FdbTraceProducerData::clear_sender_host_name() {
  sender_host_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FdbTraceProducerData::sender_host_name() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbTraceProducerData.sender_host_name)
  return _internal_sender_host_name();
}
inline void FdbTraceProducerData::set_sender_host_name(const std::string& value) {
  _internal_set_sender_host_name(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbTraceProducerData.sender_host_name)
}
inline std::string* FdbTraceProducerData::mutable_sender_host_name() {
  // @@protoc_insertion_point(field_mutable:NFdbBase.FdbTraceProducerData.sender_host_name)
  return _internal_mutable_sender_host_name();
}
inline const std::string& FdbTraceProducerData::_internal_sender_host_name() const {
  return sender_host_name_.GetNoArena();
}
inline void FdbTraceProducerData::_internal_set_sender_host_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sender_host_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FdbTraceProducerData::set_sender_host_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sender_host_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFdbBase.FdbTraceProducerData.sender_host_name)
}
inline void FdbTraceProducerData::set_sender_host_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sender_host_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFdbBase.FdbTraceProducerData.sender_host_name)
}
inline void FdbTraceProducerData::set_sender_host_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sender_host_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFdbBase.FdbTraceProducerData.sender_host_name)
}
inline std::string* FdbTraceProducerData::_internal_mutable_sender_host_name() {
  _has_bits_[0] |= 0x00000001u;
  return sender_host_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FdbTraceProducerData::release_sender_host_name() {
  // @@protoc_insertion_point(field_release:NFdbBase.FdbTraceProducerData.sender_host_name)
  if (!has_sender_host_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sender_host_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FdbTraceProducerData::set_allocated_sender_host_name(std::string* sender_host_name) {
  if (sender_host_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sender_host_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_host_name);
  // @@protoc_insertion_point(field_set_allocated:NFdbBase.FdbTraceProducerData.sender_host_name)
}

// required string tag = 3;
inline bool FdbTraceProducerData::_internal_has_tag() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FdbTraceProducerData::has_tag() const {
  return _internal_has_tag();
}
inline void FdbTraceProducerData::clear_tag() {
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FdbTraceProducerData::tag() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbTraceProducerData.tag)
  return _internal_tag();
}
inline void FdbTraceProducerData::set_tag(const std::string& value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbTraceProducerData.tag)
}
inline std::string* FdbTraceProducerData::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:NFdbBase.FdbTraceProducerData.tag)
  return _internal_mutable_tag();
}
inline const std::string& FdbTraceProducerData::_internal_tag() const {
  return tag_.GetNoArena();
}
inline void FdbTraceProducerData::_internal_set_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FdbTraceProducerData::set_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFdbBase.FdbTraceProducerData.tag)
}
inline void FdbTraceProducerData::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFdbBase.FdbTraceProducerData.tag)
}
inline void FdbTraceProducerData::set_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFdbBase.FdbTraceProducerData.tag)
}
inline std::string* FdbTraceProducerData::_internal_mutable_tag() {
  _has_bits_[0] |= 0x00000002u;
  return tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FdbTraceProducerData::release_tag() {
  // @@protoc_insertion_point(field_release:NFdbBase.FdbTraceProducerData.tag)
  if (!has_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return tag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FdbTraceProducerData::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:NFdbBase.FdbTraceProducerData.tag)
}

// required int64 time_stamp = 4;
inline bool FdbTraceProducerData::_internal_has_time_stamp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FdbTraceProducerData::has_time_stamp() const {
  return _internal_has_time_stamp();
}
inline void FdbTraceProducerData::clear_time_stamp() {
  time_stamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FdbTraceProducerData::_internal_time_stamp() const {
  return time_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FdbTraceProducerData::time_stamp() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbTraceProducerData.time_stamp)
  return _internal_time_stamp();
}
inline void FdbTraceProducerData::_internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  time_stamp_ = value;
}
inline void FdbTraceProducerData::set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbTraceProducerData.time_stamp)
}

// required .NFdbBase.FdbTraceLogLevel trace_level = 5;
inline bool FdbTraceProducerData::_internal_has_trace_level() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FdbTraceProducerData::has_trace_level() const {
  return _internal_has_trace_level();
}
inline void FdbTraceProducerData::clear_trace_level() {
  trace_level_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::NFdbBase::FdbTraceLogLevel FdbTraceProducerData::_internal_trace_level() const {
  return static_cast< ::NFdbBase::FdbTraceLogLevel >(trace_level_);
}
inline ::NFdbBase::FdbTraceLogLevel FdbTraceProducerData::trace_level() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbTraceProducerData.trace_level)
  return _internal_trace_level();
}
inline void FdbTraceProducerData::_internal_set_trace_level(::NFdbBase::FdbTraceLogLevel value) {
  assert(::NFdbBase::FdbTraceLogLevel_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  trace_level_ = value;
}
inline void FdbTraceProducerData::set_trace_level(::NFdbBase::FdbTraceLogLevel value) {
  _internal_set_trace_level(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbTraceProducerData.trace_level)
}

// -------------------------------------------------------------------

// FdbMsgLogConfig

// required bool global_enable = 1;
inline bool FdbMsgLogConfig::_internal_has_global_enable() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FdbMsgLogConfig::has_global_enable() const {
  return _internal_has_global_enable();
}
inline void FdbMsgLogConfig::clear_global_enable() {
  global_enable_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool FdbMsgLogConfig::_internal_global_enable() const {
  return global_enable_;
}
inline bool FdbMsgLogConfig::global_enable() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMsgLogConfig.global_enable)
  return _internal_global_enable();
}
inline void FdbMsgLogConfig::_internal_set_global_enable(bool value) {
  _has_bits_[0] |= 0x00000001u;
  global_enable_ = value;
}
inline void FdbMsgLogConfig::set_global_enable(bool value) {
  _internal_set_global_enable(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMsgLogConfig.global_enable)
}

// required bool enable_request = 2;
inline bool FdbMsgLogConfig::_internal_has_enable_request() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FdbMsgLogConfig::has_enable_request() const {
  return _internal_has_enable_request();
}
inline void FdbMsgLogConfig::clear_enable_request() {
  enable_request_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool FdbMsgLogConfig::_internal_enable_request() const {
  return enable_request_;
}
inline bool FdbMsgLogConfig::enable_request() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMsgLogConfig.enable_request)
  return _internal_enable_request();
}
inline void FdbMsgLogConfig::_internal_set_enable_request(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enable_request_ = value;
}
inline void FdbMsgLogConfig::set_enable_request(bool value) {
  _internal_set_enable_request(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMsgLogConfig.enable_request)
}

// required bool enable_reply = 3;
inline bool FdbMsgLogConfig::_internal_has_enable_reply() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FdbMsgLogConfig::has_enable_reply() const {
  return _internal_has_enable_reply();
}
inline void FdbMsgLogConfig::clear_enable_reply() {
  enable_reply_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool FdbMsgLogConfig::_internal_enable_reply() const {
  return enable_reply_;
}
inline bool FdbMsgLogConfig::enable_reply() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMsgLogConfig.enable_reply)
  return _internal_enable_reply();
}
inline void FdbMsgLogConfig::_internal_set_enable_reply(bool value) {
  _has_bits_[0] |= 0x00000004u;
  enable_reply_ = value;
}
inline void FdbMsgLogConfig::set_enable_reply(bool value) {
  _internal_set_enable_reply(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMsgLogConfig.enable_reply)
}

// required bool enable_broadcast = 4;
inline bool FdbMsgLogConfig::_internal_has_enable_broadcast() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FdbMsgLogConfig::has_enable_broadcast() const {
  return _internal_has_enable_broadcast();
}
inline void FdbMsgLogConfig::clear_enable_broadcast() {
  enable_broadcast_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool FdbMsgLogConfig::_internal_enable_broadcast() const {
  return enable_broadcast_;
}
inline bool FdbMsgLogConfig::enable_broadcast() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMsgLogConfig.enable_broadcast)
  return _internal_enable_broadcast();
}
inline void FdbMsgLogConfig::_internal_set_enable_broadcast(bool value) {
  _has_bits_[0] |= 0x00000008u;
  enable_broadcast_ = value;
}
inline void FdbMsgLogConfig::set_enable_broadcast(bool value) {
  _internal_set_enable_broadcast(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMsgLogConfig.enable_broadcast)
}

// required bool enable_subscribe = 5;
inline bool FdbMsgLogConfig::_internal_has_enable_subscribe() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FdbMsgLogConfig::has_enable_subscribe() const {
  return _internal_has_enable_subscribe();
}
inline void FdbMsgLogConfig::clear_enable_subscribe() {
  enable_subscribe_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool FdbMsgLogConfig::_internal_enable_subscribe() const {
  return enable_subscribe_;
}
inline bool FdbMsgLogConfig::enable_subscribe() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMsgLogConfig.enable_subscribe)
  return _internal_enable_subscribe();
}
inline void FdbMsgLogConfig::_internal_set_enable_subscribe(bool value) {
  _has_bits_[0] |= 0x00000010u;
  enable_subscribe_ = value;
}
inline void FdbMsgLogConfig::set_enable_subscribe(bool value) {
  _internal_set_enable_subscribe(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMsgLogConfig.enable_subscribe)
}

// required int32 raw_data_clipping_size = 6;
inline bool FdbMsgLogConfig::_internal_has_raw_data_clipping_size() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FdbMsgLogConfig::has_raw_data_clipping_size() const {
  return _internal_has_raw_data_clipping_size();
}
inline void FdbMsgLogConfig::clear_raw_data_clipping_size() {
  raw_data_clipping_size_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FdbMsgLogConfig::_internal_raw_data_clipping_size() const {
  return raw_data_clipping_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FdbMsgLogConfig::raw_data_clipping_size() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMsgLogConfig.raw_data_clipping_size)
  return _internal_raw_data_clipping_size();
}
inline void FdbMsgLogConfig::_internal_set_raw_data_clipping_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  raw_data_clipping_size_ = value;
}
inline void FdbMsgLogConfig::set_raw_data_clipping_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_raw_data_clipping_size(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMsgLogConfig.raw_data_clipping_size)
}

// repeated string host_while_list = 7;
inline int FdbMsgLogConfig::_internal_host_while_list_size() const {
  return host_while_list_.size();
}
inline int FdbMsgLogConfig::host_while_list_size() const {
  return _internal_host_while_list_size();
}
inline void FdbMsgLogConfig::clear_host_while_list() {
  host_while_list_.Clear();
}
inline std::string* FdbMsgLogConfig::add_host_while_list() {
  // @@protoc_insertion_point(field_add_mutable:NFdbBase.FdbMsgLogConfig.host_while_list)
  return _internal_add_host_while_list();
}
inline const std::string& FdbMsgLogConfig::_internal_host_while_list(int index) const {
  return host_while_list_.Get(index);
}
inline const std::string& FdbMsgLogConfig::host_while_list(int index) const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMsgLogConfig.host_while_list)
  return _internal_host_while_list(index);
}
inline std::string* FdbMsgLogConfig::mutable_host_while_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFdbBase.FdbMsgLogConfig.host_while_list)
  return host_while_list_.Mutable(index);
}
inline void FdbMsgLogConfig::set_host_while_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMsgLogConfig.host_while_list)
  host_while_list_.Mutable(index)->assign(value);
}
inline void FdbMsgLogConfig::set_host_while_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMsgLogConfig.host_while_list)
  host_while_list_.Mutable(index)->assign(std::move(value));
}
inline void FdbMsgLogConfig::set_host_while_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  host_while_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFdbBase.FdbMsgLogConfig.host_while_list)
}
inline void FdbMsgLogConfig::set_host_while_list(int index, const char* value, size_t size) {
  host_while_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFdbBase.FdbMsgLogConfig.host_while_list)
}
inline std::string* FdbMsgLogConfig::_internal_add_host_while_list() {
  return host_while_list_.Add();
}
inline void FdbMsgLogConfig::add_host_while_list(const std::string& value) {
  host_while_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFdbBase.FdbMsgLogConfig.host_while_list)
}
inline void FdbMsgLogConfig::add_host_while_list(std::string&& value) {
  host_while_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFdbBase.FdbMsgLogConfig.host_while_list)
}
inline void FdbMsgLogConfig::add_host_while_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  host_while_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFdbBase.FdbMsgLogConfig.host_while_list)
}
inline void FdbMsgLogConfig::add_host_while_list(const char* value, size_t size) {
  host_while_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFdbBase.FdbMsgLogConfig.host_while_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FdbMsgLogConfig::host_while_list() const {
  // @@protoc_insertion_point(field_list:NFdbBase.FdbMsgLogConfig.host_while_list)
  return host_while_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FdbMsgLogConfig::mutable_host_while_list() {
  // @@protoc_insertion_point(field_mutable_list:NFdbBase.FdbMsgLogConfig.host_while_list)
  return &host_while_list_;
}

// repeated string endpoint_while_list = 8;
inline int FdbMsgLogConfig::_internal_endpoint_while_list_size() const {
  return endpoint_while_list_.size();
}
inline int FdbMsgLogConfig::endpoint_while_list_size() const {
  return _internal_endpoint_while_list_size();
}
inline void FdbMsgLogConfig::clear_endpoint_while_list() {
  endpoint_while_list_.Clear();
}
inline std::string* FdbMsgLogConfig::add_endpoint_while_list() {
  // @@protoc_insertion_point(field_add_mutable:NFdbBase.FdbMsgLogConfig.endpoint_while_list)
  return _internal_add_endpoint_while_list();
}
inline const std::string& FdbMsgLogConfig::_internal_endpoint_while_list(int index) const {
  return endpoint_while_list_.Get(index);
}
inline const std::string& FdbMsgLogConfig::endpoint_while_list(int index) const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMsgLogConfig.endpoint_while_list)
  return _internal_endpoint_while_list(index);
}
inline std::string* FdbMsgLogConfig::mutable_endpoint_while_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFdbBase.FdbMsgLogConfig.endpoint_while_list)
  return endpoint_while_list_.Mutable(index);
}
inline void FdbMsgLogConfig::set_endpoint_while_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMsgLogConfig.endpoint_while_list)
  endpoint_while_list_.Mutable(index)->assign(value);
}
inline void FdbMsgLogConfig::set_endpoint_while_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMsgLogConfig.endpoint_while_list)
  endpoint_while_list_.Mutable(index)->assign(std::move(value));
}
inline void FdbMsgLogConfig::set_endpoint_while_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  endpoint_while_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFdbBase.FdbMsgLogConfig.endpoint_while_list)
}
inline void FdbMsgLogConfig::set_endpoint_while_list(int index, const char* value, size_t size) {
  endpoint_while_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFdbBase.FdbMsgLogConfig.endpoint_while_list)
}
inline std::string* FdbMsgLogConfig::_internal_add_endpoint_while_list() {
  return endpoint_while_list_.Add();
}
inline void FdbMsgLogConfig::add_endpoint_while_list(const std::string& value) {
  endpoint_while_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFdbBase.FdbMsgLogConfig.endpoint_while_list)
}
inline void FdbMsgLogConfig::add_endpoint_while_list(std::string&& value) {
  endpoint_while_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFdbBase.FdbMsgLogConfig.endpoint_while_list)
}
inline void FdbMsgLogConfig::add_endpoint_while_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  endpoint_while_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFdbBase.FdbMsgLogConfig.endpoint_while_list)
}
inline void FdbMsgLogConfig::add_endpoint_while_list(const char* value, size_t size) {
  endpoint_while_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFdbBase.FdbMsgLogConfig.endpoint_while_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FdbMsgLogConfig::endpoint_while_list() const {
  // @@protoc_insertion_point(field_list:NFdbBase.FdbMsgLogConfig.endpoint_while_list)
  return endpoint_while_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FdbMsgLogConfig::mutable_endpoint_while_list() {
  // @@protoc_insertion_point(field_mutable_list:NFdbBase.FdbMsgLogConfig.endpoint_while_list)
  return &endpoint_while_list_;
}

// -------------------------------------------------------------------

// FdbTraceConfig

// required bool global_enable = 1;
inline bool FdbTraceConfig::_internal_has_global_enable() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FdbTraceConfig::has_global_enable() const {
  return _internal_has_global_enable();
}
inline void FdbTraceConfig::clear_global_enable() {
  global_enable_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool FdbTraceConfig::_internal_global_enable() const {
  return global_enable_;
}
inline bool FdbTraceConfig::global_enable() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbTraceConfig.global_enable)
  return _internal_global_enable();
}
inline void FdbTraceConfig::_internal_set_global_enable(bool value) {
  _has_bits_[0] |= 0x00000001u;
  global_enable_ = value;
}
inline void FdbTraceConfig::set_global_enable(bool value) {
  _internal_set_global_enable(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbTraceConfig.global_enable)
}

// required .NFdbBase.FdbTraceLogLevel log_level = 2;
inline bool FdbTraceConfig::_internal_has_log_level() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FdbTraceConfig::has_log_level() const {
  return _internal_has_log_level();
}
inline void FdbTraceConfig::clear_log_level() {
  log_level_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::NFdbBase::FdbTraceLogLevel FdbTraceConfig::_internal_log_level() const {
  return static_cast< ::NFdbBase::FdbTraceLogLevel >(log_level_);
}
inline ::NFdbBase::FdbTraceLogLevel FdbTraceConfig::log_level() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbTraceConfig.log_level)
  return _internal_log_level();
}
inline void FdbTraceConfig::_internal_set_log_level(::NFdbBase::FdbTraceLogLevel value) {
  assert(::NFdbBase::FdbTraceLogLevel_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  log_level_ = value;
}
inline void FdbTraceConfig::set_log_level(::NFdbBase::FdbTraceLogLevel value) {
  _internal_set_log_level(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbTraceConfig.log_level)
}

// repeated string host_while_list = 7;
inline int FdbTraceConfig::_internal_host_while_list_size() const {
  return host_while_list_.size();
}
inline int FdbTraceConfig::host_while_list_size() const {
  return _internal_host_while_list_size();
}
inline void FdbTraceConfig::clear_host_while_list() {
  host_while_list_.Clear();
}
inline std::string* FdbTraceConfig::add_host_while_list() {
  // @@protoc_insertion_point(field_add_mutable:NFdbBase.FdbTraceConfig.host_while_list)
  return _internal_add_host_while_list();
}
inline const std::string& FdbTraceConfig::_internal_host_while_list(int index) const {
  return host_while_list_.Get(index);
}
inline const std::string& FdbTraceConfig::host_while_list(int index) const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbTraceConfig.host_while_list)
  return _internal_host_while_list(index);
}
inline std::string* FdbTraceConfig::mutable_host_while_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFdbBase.FdbTraceConfig.host_while_list)
  return host_while_list_.Mutable(index);
}
inline void FdbTraceConfig::set_host_while_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:NFdbBase.FdbTraceConfig.host_while_list)
  host_while_list_.Mutable(index)->assign(value);
}
inline void FdbTraceConfig::set_host_while_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:NFdbBase.FdbTraceConfig.host_while_list)
  host_while_list_.Mutable(index)->assign(std::move(value));
}
inline void FdbTraceConfig::set_host_while_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  host_while_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFdbBase.FdbTraceConfig.host_while_list)
}
inline void FdbTraceConfig::set_host_while_list(int index, const char* value, size_t size) {
  host_while_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFdbBase.FdbTraceConfig.host_while_list)
}
inline std::string* FdbTraceConfig::_internal_add_host_while_list() {
  return host_while_list_.Add();
}
inline void FdbTraceConfig::add_host_while_list(const std::string& value) {
  host_while_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFdbBase.FdbTraceConfig.host_while_list)
}
inline void FdbTraceConfig::add_host_while_list(std::string&& value) {
  host_while_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFdbBase.FdbTraceConfig.host_while_list)
}
inline void FdbTraceConfig::add_host_while_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  host_while_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFdbBase.FdbTraceConfig.host_while_list)
}
inline void FdbTraceConfig::add_host_while_list(const char* value, size_t size) {
  host_while_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFdbBase.FdbTraceConfig.host_while_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FdbTraceConfig::host_while_list() const {
  // @@protoc_insertion_point(field_list:NFdbBase.FdbTraceConfig.host_while_list)
  return host_while_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FdbTraceConfig::mutable_host_while_list() {
  // @@protoc_insertion_point(field_mutable_list:NFdbBase.FdbTraceConfig.host_while_list)
  return &host_while_list_;
}

// repeated string tag_while_list = 8;
inline int FdbTraceConfig::_internal_tag_while_list_size() const {
  return tag_while_list_.size();
}
inline int FdbTraceConfig::tag_while_list_size() const {
  return _internal_tag_while_list_size();
}
inline void FdbTraceConfig::clear_tag_while_list() {
  tag_while_list_.Clear();
}
inline std::string* FdbTraceConfig::add_tag_while_list() {
  // @@protoc_insertion_point(field_add_mutable:NFdbBase.FdbTraceConfig.tag_while_list)
  return _internal_add_tag_while_list();
}
inline const std::string& FdbTraceConfig::_internal_tag_while_list(int index) const {
  return tag_while_list_.Get(index);
}
inline const std::string& FdbTraceConfig::tag_while_list(int index) const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbTraceConfig.tag_while_list)
  return _internal_tag_while_list(index);
}
inline std::string* FdbTraceConfig::mutable_tag_while_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFdbBase.FdbTraceConfig.tag_while_list)
  return tag_while_list_.Mutable(index);
}
inline void FdbTraceConfig::set_tag_while_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:NFdbBase.FdbTraceConfig.tag_while_list)
  tag_while_list_.Mutable(index)->assign(value);
}
inline void FdbTraceConfig::set_tag_while_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:NFdbBase.FdbTraceConfig.tag_while_list)
  tag_while_list_.Mutable(index)->assign(std::move(value));
}
inline void FdbTraceConfig::set_tag_while_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tag_while_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFdbBase.FdbTraceConfig.tag_while_list)
}
inline void FdbTraceConfig::set_tag_while_list(int index, const char* value, size_t size) {
  tag_while_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFdbBase.FdbTraceConfig.tag_while_list)
}
inline std::string* FdbTraceConfig::_internal_add_tag_while_list() {
  return tag_while_list_.Add();
}
inline void FdbTraceConfig::add_tag_while_list(const std::string& value) {
  tag_while_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFdbBase.FdbTraceConfig.tag_while_list)
}
inline void FdbTraceConfig::add_tag_while_list(std::string&& value) {
  tag_while_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFdbBase.FdbTraceConfig.tag_while_list)
}
inline void FdbTraceConfig::add_tag_while_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tag_while_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFdbBase.FdbTraceConfig.tag_while_list)
}
inline void FdbTraceConfig::add_tag_while_list(const char* value, size_t size) {
  tag_while_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFdbBase.FdbTraceConfig.tag_while_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FdbTraceConfig::tag_while_list() const {
  // @@protoc_insertion_point(field_list:NFdbBase.FdbTraceConfig.tag_while_list)
  return tag_while_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FdbTraceConfig::mutable_tag_while_list() {
  // @@protoc_insertion_point(field_mutable_list:NFdbBase.FdbTraceConfig.tag_while_list)
  return &tag_while_list_;
}

// -------------------------------------------------------------------

// FdbAuthentication

// optional .NFdbBase.FdbMsgTokens token_list = 1;
inline bool FdbAuthentication::_internal_has_token_list() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || token_list_ != nullptr);
  return value;
}
inline bool FdbAuthentication::has_token_list() const {
  return _internal_has_token_list();
}
inline const ::NFdbBase::FdbMsgTokens& FdbAuthentication::_internal_token_list() const {
  const ::NFdbBase::FdbMsgTokens* p = token_list_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NFdbBase::FdbMsgTokens*>(
      &::NFdbBase::_FdbMsgTokens_default_instance_);
}
inline const ::NFdbBase::FdbMsgTokens& FdbAuthentication::token_list() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbAuthentication.token_list)
  return _internal_token_list();
}
inline ::NFdbBase::FdbMsgTokens* FdbAuthentication::release_token_list() {
  // @@protoc_insertion_point(field_release:NFdbBase.FdbAuthentication.token_list)
  _has_bits_[0] &= ~0x00000001u;
  ::NFdbBase::FdbMsgTokens* temp = token_list_;
  token_list_ = nullptr;
  return temp;
}
inline ::NFdbBase::FdbMsgTokens* FdbAuthentication::_internal_mutable_token_list() {
  _has_bits_[0] |= 0x00000001u;
  if (token_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFdbBase::FdbMsgTokens>(GetArenaNoVirtual());
    token_list_ = p;
  }
  return token_list_;
}
inline ::NFdbBase::FdbMsgTokens* FdbAuthentication::mutable_token_list() {
  // @@protoc_insertion_point(field_mutable:NFdbBase.FdbAuthentication.token_list)
  return _internal_mutable_token_list();
}
inline void FdbAuthentication::set_allocated_token_list(::NFdbBase::FdbMsgTokens* token_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(token_list_);
  }
  if (token_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      token_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token_list, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  token_list_ = token_list;
  // @@protoc_insertion_point(field_set_allocated:NFdbBase.FdbAuthentication.token_list)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFdbBase

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::NFdbBase::FdbMessageType> : ::std::true_type {};
template <> struct is_proto_enum< ::NFdbBase::FdbTraceLogLevel> : ::std::true_type {};
template <> struct is_proto_enum< ::NFdbBase::FdbMessageLoggerCode> : ::std::true_type {};
template <> struct is_proto_enum< ::NFdbBase::FdbSubscribeType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2ebase_2eMessageHeader_2eproto
