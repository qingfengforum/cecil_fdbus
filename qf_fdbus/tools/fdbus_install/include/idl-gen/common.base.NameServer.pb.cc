// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.base.NameServer.proto

#include "common.base.NameServer.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2ebase_2eNameServer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FdbMsgAddressList_common_2ebase_2eNameServer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2ebase_2eNameServer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FdbMsgHostAddress_common_2ebase_2eNameServer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2ebase_2eNameServer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FdbMsgServiceInfo_common_2ebase_2eNameServer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2ebase_2eToken_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FdbMsgTokens_common_2ebase_2eToken_2eproto;
namespace NFdbBase {
class FdbMsgAddressListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FdbMsgAddressList> _instance;
} _FdbMsgAddressList_default_instance_;
class FdbMsgServerNameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FdbMsgServerName> _instance;
} _FdbMsgServerName_default_instance_;
class FdbMsgHostListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FdbMsgHostList> _instance;
} _FdbMsgHostList_default_instance_;
class FdbMsgHostAddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FdbMsgHostAddress> _instance;
} _FdbMsgHostAddress_default_instance_;
class FdbMsgHostRegisterAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FdbMsgHostRegisterAck> _instance;
} _FdbMsgHostRegisterAck_default_instance_;
class FdbMsgHostInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FdbMsgHostInfo> _instance;
} _FdbMsgHostInfo_default_instance_;
class FdbMsgHostAddressListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FdbMsgHostAddressList> _instance;
} _FdbMsgHostAddressList_default_instance_;
class FdbMsgServiceInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FdbMsgServiceInfo> _instance;
} _FdbMsgServiceInfo_default_instance_;
class FdbMsgServiceTableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FdbMsgServiceTable> _instance;
} _FdbMsgServiceTable_default_instance_;
}  // namespace NFdbBase
static void InitDefaultsscc_info_FdbMsgAddressList_common_2ebase_2eNameServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFdbBase::_FdbMsgAddressList_default_instance_;
    new (ptr) ::NFdbBase::FdbMsgAddressList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFdbBase::FdbMsgAddressList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FdbMsgAddressList_common_2ebase_2eNameServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FdbMsgAddressList_common_2ebase_2eNameServer_2eproto}, {
      &scc_info_FdbMsgTokens_common_2ebase_2eToken_2eproto.base,}};

static void InitDefaultsscc_info_FdbMsgHostAddress_common_2ebase_2eNameServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFdbBase::_FdbMsgHostAddress_default_instance_;
    new (ptr) ::NFdbBase::FdbMsgHostAddress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFdbBase::FdbMsgHostAddress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FdbMsgHostAddress_common_2ebase_2eNameServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FdbMsgHostAddress_common_2ebase_2eNameServer_2eproto}, {
      &scc_info_FdbMsgTokens_common_2ebase_2eToken_2eproto.base,}};

static void InitDefaultsscc_info_FdbMsgHostAddressList_common_2ebase_2eNameServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFdbBase::_FdbMsgHostAddressList_default_instance_;
    new (ptr) ::NFdbBase::FdbMsgHostAddressList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFdbBase::FdbMsgHostAddressList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FdbMsgHostAddressList_common_2ebase_2eNameServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FdbMsgHostAddressList_common_2ebase_2eNameServer_2eproto}, {
      &scc_info_FdbMsgHostAddress_common_2ebase_2eNameServer_2eproto.base,}};

static void InitDefaultsscc_info_FdbMsgHostInfo_common_2ebase_2eNameServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFdbBase::_FdbMsgHostInfo_default_instance_;
    new (ptr) ::NFdbBase::FdbMsgHostInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFdbBase::FdbMsgHostInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FdbMsgHostInfo_common_2ebase_2eNameServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FdbMsgHostInfo_common_2ebase_2eNameServer_2eproto}, {}};

static void InitDefaultsscc_info_FdbMsgHostList_common_2ebase_2eNameServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFdbBase::_FdbMsgHostList_default_instance_;
    new (ptr) ::NFdbBase::FdbMsgHostList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFdbBase::FdbMsgHostList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FdbMsgHostList_common_2ebase_2eNameServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FdbMsgHostList_common_2ebase_2eNameServer_2eproto}, {}};

static void InitDefaultsscc_info_FdbMsgHostRegisterAck_common_2ebase_2eNameServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFdbBase::_FdbMsgHostRegisterAck_default_instance_;
    new (ptr) ::NFdbBase::FdbMsgHostRegisterAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFdbBase::FdbMsgHostRegisterAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FdbMsgHostRegisterAck_common_2ebase_2eNameServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FdbMsgHostRegisterAck_common_2ebase_2eNameServer_2eproto}, {
      &scc_info_FdbMsgTokens_common_2ebase_2eToken_2eproto.base,}};

static void InitDefaultsscc_info_FdbMsgServerName_common_2ebase_2eNameServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFdbBase::_FdbMsgServerName_default_instance_;
    new (ptr) ::NFdbBase::FdbMsgServerName();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFdbBase::FdbMsgServerName::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FdbMsgServerName_common_2ebase_2eNameServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FdbMsgServerName_common_2ebase_2eNameServer_2eproto}, {}};

static void InitDefaultsscc_info_FdbMsgServiceInfo_common_2ebase_2eNameServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFdbBase::_FdbMsgServiceInfo_default_instance_;
    new (ptr) ::NFdbBase::FdbMsgServiceInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFdbBase::FdbMsgServiceInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FdbMsgServiceInfo_common_2ebase_2eNameServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FdbMsgServiceInfo_common_2ebase_2eNameServer_2eproto}, {
      &scc_info_FdbMsgAddressList_common_2ebase_2eNameServer_2eproto.base,
      &scc_info_FdbMsgHostAddress_common_2ebase_2eNameServer_2eproto.base,}};

static void InitDefaultsscc_info_FdbMsgServiceTable_common_2ebase_2eNameServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFdbBase::_FdbMsgServiceTable_default_instance_;
    new (ptr) ::NFdbBase::FdbMsgServiceTable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFdbBase::FdbMsgServiceTable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FdbMsgServiceTable_common_2ebase_2eNameServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FdbMsgServiceTable_common_2ebase_2eNameServer_2eproto}, {
      &scc_info_FdbMsgServiceInfo_common_2ebase_2eNameServer_2eproto.base,}};

namespace NFdbBase {
bool FdbNsMsgCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> FdbNsMsgCode_strings[13] = {};

static const char FdbNsMsgCode_names[] =
  "NTF_HOST_INFO"
  "NTF_HOST_ONLINE_LOCAL"
  "NTF_MORE_ADDRESS"
  "NTF_SERVICE_ONLINE"
  "NTF_SERVICE_ONLINE_INTER_MACHINE"
  "NTF_SERVICE_ONLINE_MONITOR"
  "NTF_SERVICE_ONLINE_MONITOR_INTER_MACHINE"
  "REQ_ALLOC_SERVICE_ADDRESS"
  "REQ_QUERY_HOST_LOCAL"
  "REQ_QUERY_SERVICE"
  "REQ_QUERY_SERVICE_INTER_MACHINE"
  "REQ_REGISTER_SERVICE"
  "REQ_UNREGISTER_SERVICE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry FdbNsMsgCode_entries[] = {
  { {FdbNsMsgCode_names + 0, 13}, 12 },
  { {FdbNsMsgCode_names + 13, 21}, 11 },
  { {FdbNsMsgCode_names + 34, 16}, 8 },
  { {FdbNsMsgCode_names + 50, 18}, 6 },
  { {FdbNsMsgCode_names + 68, 32}, 7 },
  { {FdbNsMsgCode_names + 100, 26}, 9 },
  { {FdbNsMsgCode_names + 126, 40}, 10 },
  { {FdbNsMsgCode_names + 166, 25}, 0 },
  { {FdbNsMsgCode_names + 191, 20}, 5 },
  { {FdbNsMsgCode_names + 211, 17}, 3 },
  { {FdbNsMsgCode_names + 228, 31}, 4 },
  { {FdbNsMsgCode_names + 259, 20}, 1 },
  { {FdbNsMsgCode_names + 279, 22}, 2 },
};

static const int FdbNsMsgCode_entries_by_number[] = {
  7, // 0 -> REQ_ALLOC_SERVICE_ADDRESS
  11, // 1 -> REQ_REGISTER_SERVICE
  12, // 2 -> REQ_UNREGISTER_SERVICE
  9, // 3 -> REQ_QUERY_SERVICE
  10, // 4 -> REQ_QUERY_SERVICE_INTER_MACHINE
  8, // 5 -> REQ_QUERY_HOST_LOCAL
  3, // 6 -> NTF_SERVICE_ONLINE
  4, // 7 -> NTF_SERVICE_ONLINE_INTER_MACHINE
  2, // 8 -> NTF_MORE_ADDRESS
  5, // 9 -> NTF_SERVICE_ONLINE_MONITOR
  6, // 10 -> NTF_SERVICE_ONLINE_MONITOR_INTER_MACHINE
  1, // 11 -> NTF_HOST_ONLINE_LOCAL
  0, // 12 -> NTF_HOST_INFO
};

const std::string& FdbNsMsgCode_Name(
    FdbNsMsgCode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          FdbNsMsgCode_entries,
          FdbNsMsgCode_entries_by_number,
          13, FdbNsMsgCode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      FdbNsMsgCode_entries,
      FdbNsMsgCode_entries_by_number,
      13, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     FdbNsMsgCode_strings[idx].get();
}
bool FdbNsMsgCode_Parse(
    const std::string& name, FdbNsMsgCode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      FdbNsMsgCode_entries, 13, name, &int_value);
  if (success) {
    *value = static_cast<FdbNsMsgCode>(int_value);
  }
  return success;
}
bool FdbHsMsgCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> FdbHsMsgCode_strings[7] = {};

static const char FdbHsMsgCode_names[] =
  "NTF_HEART_BEAT"
  "NTF_HOST_ONLINE"
  "REQ_HEARTBEAT_OK"
  "REQ_HOST_READY"
  "REQ_QUERY_HOST"
  "REQ_REGISTER_HOST"
  "REQ_UNREGISTER_HOST";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry FdbHsMsgCode_entries[] = {
  { {FdbHsMsgCode_names + 0, 14}, 6 },
  { {FdbHsMsgCode_names + 14, 15}, 5 },
  { {FdbHsMsgCode_names + 29, 16}, 3 },
  { {FdbHsMsgCode_names + 45, 14}, 4 },
  { {FdbHsMsgCode_names + 59, 14}, 2 },
  { {FdbHsMsgCode_names + 73, 17}, 0 },
  { {FdbHsMsgCode_names + 90, 19}, 1 },
};

static const int FdbHsMsgCode_entries_by_number[] = {
  5, // 0 -> REQ_REGISTER_HOST
  6, // 1 -> REQ_UNREGISTER_HOST
  4, // 2 -> REQ_QUERY_HOST
  2, // 3 -> REQ_HEARTBEAT_OK
  3, // 4 -> REQ_HOST_READY
  1, // 5 -> NTF_HOST_ONLINE
  0, // 6 -> NTF_HEART_BEAT
};

const std::string& FdbHsMsgCode_Name(
    FdbHsMsgCode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          FdbHsMsgCode_entries,
          FdbHsMsgCode_entries_by_number,
          7, FdbHsMsgCode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      FdbHsMsgCode_entries,
      FdbHsMsgCode_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     FdbHsMsgCode_strings[idx].get();
}
bool FdbHsMsgCode_Parse(
    const std::string& name, FdbHsMsgCode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      FdbHsMsgCode_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<FdbHsMsgCode>(int_value);
  }
  return success;
}

// ===================================================================

void FdbMsgAddressList::InitAsDefaultInstance() {
  ::NFdbBase::_FdbMsgAddressList_default_instance_._instance.get_mutable()->token_list_ = const_cast< ::NFdbBase::FdbMsgTokens*>(
      ::NFdbBase::FdbMsgTokens::internal_default_instance());
}
class FdbMsgAddressList::_Internal {
 public:
  using HasBits = decltype(std::declval<FdbMsgAddressList>()._has_bits_);
  static void set_has_service_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_host_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_local(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::NFdbBase::FdbMsgTokens& token_list(const FdbMsgAddressList* msg);
  static void set_has_token_list(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::NFdbBase::FdbMsgTokens&
FdbMsgAddressList::_Internal::token_list(const FdbMsgAddressList* msg) {
  return *msg->token_list_;
}
void FdbMsgAddressList::clear_token_list() {
  if (token_list_ != nullptr) token_list_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
FdbMsgAddressList::FdbMsgAddressList()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFdbBase.FdbMsgAddressList)
}
FdbMsgAddressList::FdbMsgAddressList(const FdbMsgAddressList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      address_list_(from.address_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_service_name()) {
    service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  host_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_host_name()) {
    host_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_name_);
  }
  if (from._internal_has_token_list()) {
    token_list_ = new ::NFdbBase::FdbMsgTokens(*from.token_list_);
  } else {
    token_list_ = nullptr;
  }
  is_local_ = from.is_local_;
  // @@protoc_insertion_point(copy_constructor:NFdbBase.FdbMsgAddressList)
}

void FdbMsgAddressList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FdbMsgAddressList_common_2ebase_2eNameServer_2eproto.base);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&token_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_local_) -
      reinterpret_cast<char*>(&token_list_)) + sizeof(is_local_));
}

FdbMsgAddressList::~FdbMsgAddressList() {
  // @@protoc_insertion_point(destructor:NFdbBase.FdbMsgAddressList)
  SharedDtor();
}

void FdbMsgAddressList::SharedDtor() {
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete token_list_;
}

void FdbMsgAddressList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FdbMsgAddressList& FdbMsgAddressList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FdbMsgAddressList_common_2ebase_2eNameServer_2eproto.base);
  return *internal_default_instance();
}


void FdbMsgAddressList::Clear() {
// @@protoc_insertion_point(message_clear_start:NFdbBase.FdbMsgAddressList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      service_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      host_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(token_list_ != nullptr);
      token_list_->Clear();
    }
  }
  is_local_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FdbMsgAddressList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_service_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string host_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_host_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool is_local = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_local(&has_bits);
          is_local_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string address_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_add_address_list(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .NFdbBase.FdbMsgTokens token_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_token_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FdbMsgAddressList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFdbBase.FdbMsgAddressList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string service_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // required string host_name = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_host_name(), target);
  }

  // required bool is_local = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_local(), target);
  }

  // repeated string address_list = 4;
  for (int i = 0, n = this->_internal_address_list_size(); i < n; i++) {
    const auto& s = this->_internal_address_list(i);
    target = stream->WriteString(4, s, target);
  }

  // optional .NFdbBase.FdbMsgTokens token_list = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::token_list(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFdbBase.FdbMsgAddressList)
  return target;
}

size_t FdbMsgAddressList::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFdbBase.FdbMsgAddressList)
  size_t total_size = 0;

  if (has_service_name()) {
    // required string service_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  if (has_host_name()) {
    // required string host_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host_name());
  }

  if (has_is_local()) {
    // required bool is_local = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t FdbMsgAddressList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFdbBase.FdbMsgAddressList)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required string service_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());

    // required string host_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host_name());

    // required bool is_local = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string address_list = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(address_list_.size());
  for (int i = 0, n = address_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      address_list_.Get(i));
  }

  // optional .NFdbBase.FdbMsgTokens token_list = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *token_list_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FdbMsgAddressList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FdbMsgAddressList*>(
      &from));
}

void FdbMsgAddressList::MergeFrom(const FdbMsgAddressList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFdbBase.FdbMsgAddressList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_list_.MergeFrom(from.address_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      host_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_token_list()->::NFdbBase::FdbMsgTokens::MergeFrom(from._internal_token_list());
    }
    if (cached_has_bits & 0x00000008u) {
      is_local_ = from.is_local_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FdbMsgAddressList::CopyFrom(const FdbMsgAddressList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFdbBase.FdbMsgAddressList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FdbMsgAddressList::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  if (has_token_list()) {
    if (!this->token_list_->IsInitialized()) return false;
  }
  return true;
}

void FdbMsgAddressList::InternalSwap(FdbMsgAddressList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_list_.InternalSwap(&other->address_list_);
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  host_name_.Swap(&other->host_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(token_list_, other->token_list_);
  swap(is_local_, other->is_local_);
}

std::string FdbMsgAddressList::GetTypeName() const {
  return "NFdbBase.FdbMsgAddressList";
}


// ===================================================================

void FdbMsgServerName::InitAsDefaultInstance() {
}
class FdbMsgServerName::_Internal {
 public:
  using HasBits = decltype(std::declval<FdbMsgServerName>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FdbMsgServerName::FdbMsgServerName()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFdbBase.FdbMsgServerName)
}
FdbMsgServerName::FdbMsgServerName(const FdbMsgServerName& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:NFdbBase.FdbMsgServerName)
}

void FdbMsgServerName::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FdbMsgServerName_common_2ebase_2eNameServer_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FdbMsgServerName::~FdbMsgServerName() {
  // @@protoc_insertion_point(destructor:NFdbBase.FdbMsgServerName)
  SharedDtor();
}

void FdbMsgServerName::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FdbMsgServerName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FdbMsgServerName& FdbMsgServerName::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FdbMsgServerName_common_2ebase_2eNameServer_2eproto.base);
  return *internal_default_instance();
}


void FdbMsgServerName::Clear() {
// @@protoc_insertion_point(message_clear_start:NFdbBase.FdbMsgServerName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FdbMsgServerName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FdbMsgServerName::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFdbBase.FdbMsgServerName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFdbBase.FdbMsgServerName)
  return target;
}

size_t FdbMsgServerName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFdbBase.FdbMsgServerName)
  size_t total_size = 0;

  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FdbMsgServerName::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FdbMsgServerName*>(
      &from));
}

void FdbMsgServerName::MergeFrom(const FdbMsgServerName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFdbBase.FdbMsgServerName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_name()) {
    _has_bits_[0] |= 0x00000001u;
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void FdbMsgServerName::CopyFrom(const FdbMsgServerName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFdbBase.FdbMsgServerName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FdbMsgServerName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void FdbMsgServerName::InternalSwap(FdbMsgServerName* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string FdbMsgServerName::GetTypeName() const {
  return "NFdbBase.FdbMsgServerName";
}


// ===================================================================

void FdbMsgHostList::InitAsDefaultInstance() {
}
class FdbMsgHostList::_Internal {
 public:
  using HasBits = decltype(std::declval<FdbMsgHostList>()._has_bits_);
};

FdbMsgHostList::FdbMsgHostList()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFdbBase.FdbMsgHostList)
}
FdbMsgHostList::FdbMsgHostList(const FdbMsgHostList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      address_list_(from.address_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFdbBase.FdbMsgHostList)
}

void FdbMsgHostList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FdbMsgHostList_common_2ebase_2eNameServer_2eproto.base);
}

FdbMsgHostList::~FdbMsgHostList() {
  // @@protoc_insertion_point(destructor:NFdbBase.FdbMsgHostList)
  SharedDtor();
}

void FdbMsgHostList::SharedDtor() {
}

void FdbMsgHostList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FdbMsgHostList& FdbMsgHostList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FdbMsgHostList_common_2ebase_2eNameServer_2eproto.base);
  return *internal_default_instance();
}


void FdbMsgHostList::Clear() {
// @@protoc_insertion_point(message_clear_start:NFdbBase.FdbMsgHostList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FdbMsgHostList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string address_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_add_address_list(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FdbMsgHostList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFdbBase.FdbMsgHostList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string address_list = 1;
  for (int i = 0, n = this->_internal_address_list_size(); i < n; i++) {
    const auto& s = this->_internal_address_list(i);
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFdbBase.FdbMsgHostList)
  return target;
}

size_t FdbMsgHostList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFdbBase.FdbMsgHostList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string address_list = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(address_list_.size());
  for (int i = 0, n = address_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      address_list_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FdbMsgHostList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FdbMsgHostList*>(
      &from));
}

void FdbMsgHostList::MergeFrom(const FdbMsgHostList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFdbBase.FdbMsgHostList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_list_.MergeFrom(from.address_list_);
}

void FdbMsgHostList::CopyFrom(const FdbMsgHostList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFdbBase.FdbMsgHostList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FdbMsgHostList::IsInitialized() const {
  return true;
}

void FdbMsgHostList::InternalSwap(FdbMsgHostList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_list_.InternalSwap(&other->address_list_);
}

std::string FdbMsgHostList::GetTypeName() const {
  return "NFdbBase.FdbMsgHostList";
}


// ===================================================================

void FdbMsgHostAddress::InitAsDefaultInstance() {
  ::NFdbBase::_FdbMsgHostAddress_default_instance_._instance.get_mutable()->token_list_ = const_cast< ::NFdbBase::FdbMsgTokens*>(
      ::NFdbBase::FdbMsgTokens::internal_default_instance());
}
class FdbMsgHostAddress::_Internal {
 public:
  using HasBits = decltype(std::declval<FdbMsgHostAddress>()._has_bits_);
  static void set_has_ip_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ns_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_host_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::NFdbBase::FdbMsgTokens& token_list(const FdbMsgHostAddress* msg);
  static void set_has_token_list(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::NFdbBase::FdbMsgTokens&
FdbMsgHostAddress::_Internal::token_list(const FdbMsgHostAddress* msg) {
  return *msg->token_list_;
}
void FdbMsgHostAddress::clear_token_list() {
  if (token_list_ != nullptr) token_list_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
FdbMsgHostAddress::FdbMsgHostAddress()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFdbBase.FdbMsgHostAddress)
}
FdbMsgHostAddress::FdbMsgHostAddress(const FdbMsgHostAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ip_address()) {
    ip_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_address_);
  }
  ns_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ns_url()) {
    ns_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ns_url_);
  }
  host_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_host_name()) {
    host_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_name_);
  }
  if (from._internal_has_token_list()) {
    token_list_ = new ::NFdbBase::FdbMsgTokens(*from.token_list_);
  } else {
    token_list_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFdbBase.FdbMsgHostAddress)
}

void FdbMsgHostAddress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FdbMsgHostAddress_common_2ebase_2eNameServer_2eproto.base);
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ns_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_list_ = nullptr;
}

FdbMsgHostAddress::~FdbMsgHostAddress() {
  // @@protoc_insertion_point(destructor:NFdbBase.FdbMsgHostAddress)
  SharedDtor();
}

void FdbMsgHostAddress::SharedDtor() {
  ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ns_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete token_list_;
}

void FdbMsgHostAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FdbMsgHostAddress& FdbMsgHostAddress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FdbMsgHostAddress_common_2ebase_2eNameServer_2eproto.base);
  return *internal_default_instance();
}


void FdbMsgHostAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:NFdbBase.FdbMsgHostAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ip_address_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      ns_url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      host_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(token_list_ != nullptr);
      token_list_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FdbMsgHostAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string ip_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_ip_address(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string ns_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_ns_url(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string host_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_host_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .NFdbBase.FdbMsgTokens token_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_token_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FdbMsgHostAddress::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFdbBase.FdbMsgHostAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ip_address = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip_address(), target);
  }

  // required string ns_url = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ns_url(), target);
  }

  // required string host_name = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_host_name(), target);
  }

  // optional .NFdbBase.FdbMsgTokens token_list = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::token_list(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFdbBase.FdbMsgHostAddress)
  return target;
}

size_t FdbMsgHostAddress::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFdbBase.FdbMsgHostAddress)
  size_t total_size = 0;

  if (has_ip_address()) {
    // required string ip_address = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_address());
  }

  if (has_ns_url()) {
    // required string ns_url = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ns_url());
  }

  if (has_host_name()) {
    // required string host_name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host_name());
  }

  return total_size;
}
size_t FdbMsgHostAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFdbBase.FdbMsgHostAddress)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string ip_address = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_address());

    // required string ns_url = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ns_url());

    // required string host_name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .NFdbBase.FdbMsgTokens token_list = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *token_list_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FdbMsgHostAddress::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FdbMsgHostAddress*>(
      &from));
}

void FdbMsgHostAddress::MergeFrom(const FdbMsgHostAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFdbBase.FdbMsgHostAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      ip_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_address_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      ns_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ns_url_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      host_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_token_list()->::NFdbBase::FdbMsgTokens::MergeFrom(from._internal_token_list());
    }
  }
}

void FdbMsgHostAddress::CopyFrom(const FdbMsgHostAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFdbBase.FdbMsgHostAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FdbMsgHostAddress::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_token_list()) {
    if (!this->token_list_->IsInitialized()) return false;
  }
  return true;
}

void FdbMsgHostAddress::InternalSwap(FdbMsgHostAddress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ip_address_.Swap(&other->ip_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ns_url_.Swap(&other->ns_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  host_name_.Swap(&other->host_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(token_list_, other->token_list_);
}

std::string FdbMsgHostAddress::GetTypeName() const {
  return "NFdbBase.FdbMsgHostAddress";
}


// ===================================================================

void FdbMsgHostRegisterAck::InitAsDefaultInstance() {
  ::NFdbBase::_FdbMsgHostRegisterAck_default_instance_._instance.get_mutable()->token_list_ = const_cast< ::NFdbBase::FdbMsgTokens*>(
      ::NFdbBase::FdbMsgTokens::internal_default_instance());
}
class FdbMsgHostRegisterAck::_Internal {
 public:
  using HasBits = decltype(std::declval<FdbMsgHostRegisterAck>()._has_bits_);
  static const ::NFdbBase::FdbMsgTokens& token_list(const FdbMsgHostRegisterAck* msg);
  static void set_has_token_list(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::NFdbBase::FdbMsgTokens&
FdbMsgHostRegisterAck::_Internal::token_list(const FdbMsgHostRegisterAck* msg) {
  return *msg->token_list_;
}
void FdbMsgHostRegisterAck::clear_token_list() {
  if (token_list_ != nullptr) token_list_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FdbMsgHostRegisterAck::FdbMsgHostRegisterAck()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFdbBase.FdbMsgHostRegisterAck)
}
FdbMsgHostRegisterAck::FdbMsgHostRegisterAck(const FdbMsgHostRegisterAck& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_token_list()) {
    token_list_ = new ::NFdbBase::FdbMsgTokens(*from.token_list_);
  } else {
    token_list_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFdbBase.FdbMsgHostRegisterAck)
}

void FdbMsgHostRegisterAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FdbMsgHostRegisterAck_common_2ebase_2eNameServer_2eproto.base);
  token_list_ = nullptr;
}

FdbMsgHostRegisterAck::~FdbMsgHostRegisterAck() {
  // @@protoc_insertion_point(destructor:NFdbBase.FdbMsgHostRegisterAck)
  SharedDtor();
}

void FdbMsgHostRegisterAck::SharedDtor() {
  if (this != internal_default_instance()) delete token_list_;
}

void FdbMsgHostRegisterAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FdbMsgHostRegisterAck& FdbMsgHostRegisterAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FdbMsgHostRegisterAck_common_2ebase_2eNameServer_2eproto.base);
  return *internal_default_instance();
}


void FdbMsgHostRegisterAck::Clear() {
// @@protoc_insertion_point(message_clear_start:NFdbBase.FdbMsgHostRegisterAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(token_list_ != nullptr);
    token_list_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FdbMsgHostRegisterAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .NFdbBase.FdbMsgTokens token_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_token_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FdbMsgHostRegisterAck::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFdbBase.FdbMsgHostRegisterAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .NFdbBase.FdbMsgTokens token_list = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::token_list(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFdbBase.FdbMsgHostRegisterAck)
  return target;
}

size_t FdbMsgHostRegisterAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFdbBase.FdbMsgHostRegisterAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .NFdbBase.FdbMsgTokens token_list = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *token_list_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FdbMsgHostRegisterAck::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FdbMsgHostRegisterAck*>(
      &from));
}

void FdbMsgHostRegisterAck::MergeFrom(const FdbMsgHostRegisterAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFdbBase.FdbMsgHostRegisterAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_token_list()) {
    _internal_mutable_token_list()->::NFdbBase::FdbMsgTokens::MergeFrom(from._internal_token_list());
  }
}

void FdbMsgHostRegisterAck::CopyFrom(const FdbMsgHostRegisterAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFdbBase.FdbMsgHostRegisterAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FdbMsgHostRegisterAck::IsInitialized() const {
  if (has_token_list()) {
    if (!this->token_list_->IsInitialized()) return false;
  }
  return true;
}

void FdbMsgHostRegisterAck::InternalSwap(FdbMsgHostRegisterAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(token_list_, other->token_list_);
}

std::string FdbMsgHostRegisterAck::GetTypeName() const {
  return "NFdbBase.FdbMsgHostRegisterAck";
}


// ===================================================================

void FdbMsgHostInfo::InitAsDefaultInstance() {
}
class FdbMsgHostInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<FdbMsgHostInfo>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FdbMsgHostInfo::FdbMsgHostInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFdbBase.FdbMsgHostInfo)
}
FdbMsgHostInfo::FdbMsgHostInfo(const FdbMsgHostInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:NFdbBase.FdbMsgHostInfo)
}

void FdbMsgHostInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FdbMsgHostInfo_common_2ebase_2eNameServer_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FdbMsgHostInfo::~FdbMsgHostInfo() {
  // @@protoc_insertion_point(destructor:NFdbBase.FdbMsgHostInfo)
  SharedDtor();
}

void FdbMsgHostInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FdbMsgHostInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FdbMsgHostInfo& FdbMsgHostInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FdbMsgHostInfo_common_2ebase_2eNameServer_2eproto.base);
  return *internal_default_instance();
}


void FdbMsgHostInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFdbBase.FdbMsgHostInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FdbMsgHostInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FdbMsgHostInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFdbBase.FdbMsgHostInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFdbBase.FdbMsgHostInfo)
  return target;
}

size_t FdbMsgHostInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFdbBase.FdbMsgHostInfo)
  size_t total_size = 0;

  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FdbMsgHostInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FdbMsgHostInfo*>(
      &from));
}

void FdbMsgHostInfo::MergeFrom(const FdbMsgHostInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFdbBase.FdbMsgHostInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_name()) {
    _has_bits_[0] |= 0x00000001u;
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void FdbMsgHostInfo::CopyFrom(const FdbMsgHostInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFdbBase.FdbMsgHostInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FdbMsgHostInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void FdbMsgHostInfo::InternalSwap(FdbMsgHostInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string FdbMsgHostInfo::GetTypeName() const {
  return "NFdbBase.FdbMsgHostInfo";
}


// ===================================================================

void FdbMsgHostAddressList::InitAsDefaultInstance() {
}
class FdbMsgHostAddressList::_Internal {
 public:
  using HasBits = decltype(std::declval<FdbMsgHostAddressList>()._has_bits_);
};

FdbMsgHostAddressList::FdbMsgHostAddressList()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFdbBase.FdbMsgHostAddressList)
}
FdbMsgHostAddressList::FdbMsgHostAddressList(const FdbMsgHostAddressList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      address_list_(from.address_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFdbBase.FdbMsgHostAddressList)
}

void FdbMsgHostAddressList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FdbMsgHostAddressList_common_2ebase_2eNameServer_2eproto.base);
}

FdbMsgHostAddressList::~FdbMsgHostAddressList() {
  // @@protoc_insertion_point(destructor:NFdbBase.FdbMsgHostAddressList)
  SharedDtor();
}

void FdbMsgHostAddressList::SharedDtor() {
}

void FdbMsgHostAddressList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FdbMsgHostAddressList& FdbMsgHostAddressList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FdbMsgHostAddressList_common_2ebase_2eNameServer_2eproto.base);
  return *internal_default_instance();
}


void FdbMsgHostAddressList::Clear() {
// @@protoc_insertion_point(message_clear_start:NFdbBase.FdbMsgHostAddressList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FdbMsgHostAddressList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .NFdbBase.FdbMsgHostAddress address_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_address_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FdbMsgHostAddressList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFdbBase.FdbMsgHostAddressList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFdbBase.FdbMsgHostAddress address_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_address_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_address_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFdbBase.FdbMsgHostAddressList)
  return target;
}

size_t FdbMsgHostAddressList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFdbBase.FdbMsgHostAddressList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFdbBase.FdbMsgHostAddress address_list = 1;
  total_size += 1UL * this->_internal_address_list_size();
  for (const auto& msg : this->address_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FdbMsgHostAddressList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FdbMsgHostAddressList*>(
      &from));
}

void FdbMsgHostAddressList::MergeFrom(const FdbMsgHostAddressList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFdbBase.FdbMsgHostAddressList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_list_.MergeFrom(from.address_list_);
}

void FdbMsgHostAddressList::CopyFrom(const FdbMsgHostAddressList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFdbBase.FdbMsgHostAddressList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FdbMsgHostAddressList::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->address_list())) return false;
  return true;
}

void FdbMsgHostAddressList::InternalSwap(FdbMsgHostAddressList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_list_.InternalSwap(&other->address_list_);
}

std::string FdbMsgHostAddressList::GetTypeName() const {
  return "NFdbBase.FdbMsgHostAddressList";
}


// ===================================================================

void FdbMsgServiceInfo::InitAsDefaultInstance() {
  ::NFdbBase::_FdbMsgServiceInfo_default_instance_._instance.get_mutable()->service_addr_ = const_cast< ::NFdbBase::FdbMsgAddressList*>(
      ::NFdbBase::FdbMsgAddressList::internal_default_instance());
  ::NFdbBase::_FdbMsgServiceInfo_default_instance_._instance.get_mutable()->host_addr_ = const_cast< ::NFdbBase::FdbMsgHostAddress*>(
      ::NFdbBase::FdbMsgHostAddress::internal_default_instance());
}
class FdbMsgServiceInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<FdbMsgServiceInfo>()._has_bits_);
  static const ::NFdbBase::FdbMsgAddressList& service_addr(const FdbMsgServiceInfo* msg);
  static void set_has_service_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::NFdbBase::FdbMsgHostAddress& host_addr(const FdbMsgServiceInfo* msg);
  static void set_has_host_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::NFdbBase::FdbMsgAddressList&
FdbMsgServiceInfo::_Internal::service_addr(const FdbMsgServiceInfo* msg) {
  return *msg->service_addr_;
}
const ::NFdbBase::FdbMsgHostAddress&
FdbMsgServiceInfo::_Internal::host_addr(const FdbMsgServiceInfo* msg) {
  return *msg->host_addr_;
}
FdbMsgServiceInfo::FdbMsgServiceInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFdbBase.FdbMsgServiceInfo)
}
FdbMsgServiceInfo::FdbMsgServiceInfo(const FdbMsgServiceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_service_addr()) {
    service_addr_ = new ::NFdbBase::FdbMsgAddressList(*from.service_addr_);
  } else {
    service_addr_ = nullptr;
  }
  if (from._internal_has_host_addr()) {
    host_addr_ = new ::NFdbBase::FdbMsgHostAddress(*from.host_addr_);
  } else {
    host_addr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFdbBase.FdbMsgServiceInfo)
}

void FdbMsgServiceInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FdbMsgServiceInfo_common_2ebase_2eNameServer_2eproto.base);
  ::memset(&service_addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&host_addr_) -
      reinterpret_cast<char*>(&service_addr_)) + sizeof(host_addr_));
}

FdbMsgServiceInfo::~FdbMsgServiceInfo() {
  // @@protoc_insertion_point(destructor:NFdbBase.FdbMsgServiceInfo)
  SharedDtor();
}

void FdbMsgServiceInfo::SharedDtor() {
  if (this != internal_default_instance()) delete service_addr_;
  if (this != internal_default_instance()) delete host_addr_;
}

void FdbMsgServiceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FdbMsgServiceInfo& FdbMsgServiceInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FdbMsgServiceInfo_common_2ebase_2eNameServer_2eproto.base);
  return *internal_default_instance();
}


void FdbMsgServiceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFdbBase.FdbMsgServiceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(service_addr_ != nullptr);
      service_addr_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(host_addr_ != nullptr);
      host_addr_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FdbMsgServiceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .NFdbBase.FdbMsgAddressList service_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_service_addr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .NFdbBase.FdbMsgHostAddress host_addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_addr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FdbMsgServiceInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFdbBase.FdbMsgServiceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFdbBase.FdbMsgAddressList service_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::service_addr(this), target, stream);
  }

  // required .NFdbBase.FdbMsgHostAddress host_addr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::host_addr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFdbBase.FdbMsgServiceInfo)
  return target;
}

size_t FdbMsgServiceInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFdbBase.FdbMsgServiceInfo)
  size_t total_size = 0;

  if (has_service_addr()) {
    // required .NFdbBase.FdbMsgAddressList service_addr = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *service_addr_);
  }

  if (has_host_addr()) {
    // required .NFdbBase.FdbMsgHostAddress host_addr = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *host_addr_);
  }

  return total_size;
}
size_t FdbMsgServiceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFdbBase.FdbMsgServiceInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .NFdbBase.FdbMsgAddressList service_addr = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *service_addr_);

    // required .NFdbBase.FdbMsgHostAddress host_addr = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *host_addr_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FdbMsgServiceInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FdbMsgServiceInfo*>(
      &from));
}

void FdbMsgServiceInfo::MergeFrom(const FdbMsgServiceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFdbBase.FdbMsgServiceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_service_addr()->::NFdbBase::FdbMsgAddressList::MergeFrom(from._internal_service_addr());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_host_addr()->::NFdbBase::FdbMsgHostAddress::MergeFrom(from._internal_host_addr());
    }
  }
}

void FdbMsgServiceInfo::CopyFrom(const FdbMsgServiceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFdbBase.FdbMsgServiceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FdbMsgServiceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_service_addr()) {
    if (!this->service_addr_->IsInitialized()) return false;
  }
  if (has_host_addr()) {
    if (!this->host_addr_->IsInitialized()) return false;
  }
  return true;
}

void FdbMsgServiceInfo::InternalSwap(FdbMsgServiceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(service_addr_, other->service_addr_);
  swap(host_addr_, other->host_addr_);
}

std::string FdbMsgServiceInfo::GetTypeName() const {
  return "NFdbBase.FdbMsgServiceInfo";
}


// ===================================================================

void FdbMsgServiceTable::InitAsDefaultInstance() {
}
class FdbMsgServiceTable::_Internal {
 public:
  using HasBits = decltype(std::declval<FdbMsgServiceTable>()._has_bits_);
};

FdbMsgServiceTable::FdbMsgServiceTable()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFdbBase.FdbMsgServiceTable)
}
FdbMsgServiceTable::FdbMsgServiceTable(const FdbMsgServiceTable& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      service_tbl_(from.service_tbl_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFdbBase.FdbMsgServiceTable)
}

void FdbMsgServiceTable::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FdbMsgServiceTable_common_2ebase_2eNameServer_2eproto.base);
}

FdbMsgServiceTable::~FdbMsgServiceTable() {
  // @@protoc_insertion_point(destructor:NFdbBase.FdbMsgServiceTable)
  SharedDtor();
}

void FdbMsgServiceTable::SharedDtor() {
}

void FdbMsgServiceTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FdbMsgServiceTable& FdbMsgServiceTable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FdbMsgServiceTable_common_2ebase_2eNameServer_2eproto.base);
  return *internal_default_instance();
}


void FdbMsgServiceTable::Clear() {
// @@protoc_insertion_point(message_clear_start:NFdbBase.FdbMsgServiceTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_tbl_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FdbMsgServiceTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .NFdbBase.FdbMsgServiceInfo service_tbl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_service_tbl(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FdbMsgServiceTable::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFdbBase.FdbMsgServiceTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFdbBase.FdbMsgServiceInfo service_tbl = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_service_tbl_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_service_tbl(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFdbBase.FdbMsgServiceTable)
  return target;
}

size_t FdbMsgServiceTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFdbBase.FdbMsgServiceTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFdbBase.FdbMsgServiceInfo service_tbl = 1;
  total_size += 1UL * this->_internal_service_tbl_size();
  for (const auto& msg : this->service_tbl_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FdbMsgServiceTable::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FdbMsgServiceTable*>(
      &from));
}

void FdbMsgServiceTable::MergeFrom(const FdbMsgServiceTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFdbBase.FdbMsgServiceTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  service_tbl_.MergeFrom(from.service_tbl_);
}

void FdbMsgServiceTable::CopyFrom(const FdbMsgServiceTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFdbBase.FdbMsgServiceTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FdbMsgServiceTable::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->service_tbl())) return false;
  return true;
}

void FdbMsgServiceTable::InternalSwap(FdbMsgServiceTable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  service_tbl_.InternalSwap(&other->service_tbl_);
}

std::string FdbMsgServiceTable::GetTypeName() const {
  return "NFdbBase.FdbMsgServiceTable";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace NFdbBase
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NFdbBase::FdbMsgAddressList* Arena::CreateMaybeMessage< ::NFdbBase::FdbMsgAddressList >(Arena* arena) {
  return Arena::CreateInternal< ::NFdbBase::FdbMsgAddressList >(arena);
}
template<> PROTOBUF_NOINLINE ::NFdbBase::FdbMsgServerName* Arena::CreateMaybeMessage< ::NFdbBase::FdbMsgServerName >(Arena* arena) {
  return Arena::CreateInternal< ::NFdbBase::FdbMsgServerName >(arena);
}
template<> PROTOBUF_NOINLINE ::NFdbBase::FdbMsgHostList* Arena::CreateMaybeMessage< ::NFdbBase::FdbMsgHostList >(Arena* arena) {
  return Arena::CreateInternal< ::NFdbBase::FdbMsgHostList >(arena);
}
template<> PROTOBUF_NOINLINE ::NFdbBase::FdbMsgHostAddress* Arena::CreateMaybeMessage< ::NFdbBase::FdbMsgHostAddress >(Arena* arena) {
  return Arena::CreateInternal< ::NFdbBase::FdbMsgHostAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::NFdbBase::FdbMsgHostRegisterAck* Arena::CreateMaybeMessage< ::NFdbBase::FdbMsgHostRegisterAck >(Arena* arena) {
  return Arena::CreateInternal< ::NFdbBase::FdbMsgHostRegisterAck >(arena);
}
template<> PROTOBUF_NOINLINE ::NFdbBase::FdbMsgHostInfo* Arena::CreateMaybeMessage< ::NFdbBase::FdbMsgHostInfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFdbBase::FdbMsgHostInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::NFdbBase::FdbMsgHostAddressList* Arena::CreateMaybeMessage< ::NFdbBase::FdbMsgHostAddressList >(Arena* arena) {
  return Arena::CreateInternal< ::NFdbBase::FdbMsgHostAddressList >(arena);
}
template<> PROTOBUF_NOINLINE ::NFdbBase::FdbMsgServiceInfo* Arena::CreateMaybeMessage< ::NFdbBase::FdbMsgServiceInfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFdbBase::FdbMsgServiceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::NFdbBase::FdbMsgServiceTable* Arena::CreateMaybeMessage< ::NFdbBase::FdbMsgServiceTable >(Arena* arena) {
  return Arena::CreateInternal< ::NFdbBase::FdbMsgServiceTable >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
