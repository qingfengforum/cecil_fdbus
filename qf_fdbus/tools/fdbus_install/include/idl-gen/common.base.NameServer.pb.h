// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.base.NameServer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2ebase_2eNameServer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2ebase_2eNameServer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "common.base.Token.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2ebase_2eNameServer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2ebase_2eNameServer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace NFdbBase {
class FdbMsgAddressList;
class FdbMsgAddressListDefaultTypeInternal;
extern FdbMsgAddressListDefaultTypeInternal _FdbMsgAddressList_default_instance_;
class FdbMsgHostAddress;
class FdbMsgHostAddressDefaultTypeInternal;
extern FdbMsgHostAddressDefaultTypeInternal _FdbMsgHostAddress_default_instance_;
class FdbMsgHostAddressList;
class FdbMsgHostAddressListDefaultTypeInternal;
extern FdbMsgHostAddressListDefaultTypeInternal _FdbMsgHostAddressList_default_instance_;
class FdbMsgHostInfo;
class FdbMsgHostInfoDefaultTypeInternal;
extern FdbMsgHostInfoDefaultTypeInternal _FdbMsgHostInfo_default_instance_;
class FdbMsgHostList;
class FdbMsgHostListDefaultTypeInternal;
extern FdbMsgHostListDefaultTypeInternal _FdbMsgHostList_default_instance_;
class FdbMsgHostRegisterAck;
class FdbMsgHostRegisterAckDefaultTypeInternal;
extern FdbMsgHostRegisterAckDefaultTypeInternal _FdbMsgHostRegisterAck_default_instance_;
class FdbMsgServerName;
class FdbMsgServerNameDefaultTypeInternal;
extern FdbMsgServerNameDefaultTypeInternal _FdbMsgServerName_default_instance_;
class FdbMsgServiceInfo;
class FdbMsgServiceInfoDefaultTypeInternal;
extern FdbMsgServiceInfoDefaultTypeInternal _FdbMsgServiceInfo_default_instance_;
class FdbMsgServiceTable;
class FdbMsgServiceTableDefaultTypeInternal;
extern FdbMsgServiceTableDefaultTypeInternal _FdbMsgServiceTable_default_instance_;
}  // namespace NFdbBase
PROTOBUF_NAMESPACE_OPEN
template<> ::NFdbBase::FdbMsgAddressList* Arena::CreateMaybeMessage<::NFdbBase::FdbMsgAddressList>(Arena*);
template<> ::NFdbBase::FdbMsgHostAddress* Arena::CreateMaybeMessage<::NFdbBase::FdbMsgHostAddress>(Arena*);
template<> ::NFdbBase::FdbMsgHostAddressList* Arena::CreateMaybeMessage<::NFdbBase::FdbMsgHostAddressList>(Arena*);
template<> ::NFdbBase::FdbMsgHostInfo* Arena::CreateMaybeMessage<::NFdbBase::FdbMsgHostInfo>(Arena*);
template<> ::NFdbBase::FdbMsgHostList* Arena::CreateMaybeMessage<::NFdbBase::FdbMsgHostList>(Arena*);
template<> ::NFdbBase::FdbMsgHostRegisterAck* Arena::CreateMaybeMessage<::NFdbBase::FdbMsgHostRegisterAck>(Arena*);
template<> ::NFdbBase::FdbMsgServerName* Arena::CreateMaybeMessage<::NFdbBase::FdbMsgServerName>(Arena*);
template<> ::NFdbBase::FdbMsgServiceInfo* Arena::CreateMaybeMessage<::NFdbBase::FdbMsgServiceInfo>(Arena*);
template<> ::NFdbBase::FdbMsgServiceTable* Arena::CreateMaybeMessage<::NFdbBase::FdbMsgServiceTable>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace NFdbBase {

enum FdbNsMsgCode : int {
  REQ_ALLOC_SERVICE_ADDRESS = 0,
  REQ_REGISTER_SERVICE = 1,
  REQ_UNREGISTER_SERVICE = 2,
  REQ_QUERY_SERVICE = 3,
  REQ_QUERY_SERVICE_INTER_MACHINE = 4,
  REQ_QUERY_HOST_LOCAL = 5,
  NTF_SERVICE_ONLINE = 6,
  NTF_SERVICE_ONLINE_INTER_MACHINE = 7,
  NTF_MORE_ADDRESS = 8,
  NTF_SERVICE_ONLINE_MONITOR = 9,
  NTF_SERVICE_ONLINE_MONITOR_INTER_MACHINE = 10,
  NTF_HOST_ONLINE_LOCAL = 11,
  NTF_HOST_INFO = 12
};
bool FdbNsMsgCode_IsValid(int value);
constexpr FdbNsMsgCode FdbNsMsgCode_MIN = REQ_ALLOC_SERVICE_ADDRESS;
constexpr FdbNsMsgCode FdbNsMsgCode_MAX = NTF_HOST_INFO;
constexpr int FdbNsMsgCode_ARRAYSIZE = FdbNsMsgCode_MAX + 1;

const std::string& FdbNsMsgCode_Name(FdbNsMsgCode value);
template<typename T>
inline const std::string& FdbNsMsgCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FdbNsMsgCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FdbNsMsgCode_Name.");
  return FdbNsMsgCode_Name(static_cast<FdbNsMsgCode>(enum_t_value));
}
bool FdbNsMsgCode_Parse(
    const std::string& name, FdbNsMsgCode* value);
enum FdbHsMsgCode : int {
  REQ_REGISTER_HOST = 0,
  REQ_UNREGISTER_HOST = 1,
  REQ_QUERY_HOST = 2,
  REQ_HEARTBEAT_OK = 3,
  REQ_HOST_READY = 4,
  NTF_HOST_ONLINE = 5,
  NTF_HEART_BEAT = 6
};
bool FdbHsMsgCode_IsValid(int value);
constexpr FdbHsMsgCode FdbHsMsgCode_MIN = REQ_REGISTER_HOST;
constexpr FdbHsMsgCode FdbHsMsgCode_MAX = NTF_HEART_BEAT;
constexpr int FdbHsMsgCode_ARRAYSIZE = FdbHsMsgCode_MAX + 1;

const std::string& FdbHsMsgCode_Name(FdbHsMsgCode value);
template<typename T>
inline const std::string& FdbHsMsgCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FdbHsMsgCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FdbHsMsgCode_Name.");
  return FdbHsMsgCode_Name(static_cast<FdbHsMsgCode>(enum_t_value));
}
bool FdbHsMsgCode_Parse(
    const std::string& name, FdbHsMsgCode* value);
// ===================================================================

class FdbMsgAddressList :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:NFdbBase.FdbMsgAddressList) */ {
 public:
  FdbMsgAddressList();
  virtual ~FdbMsgAddressList();

  FdbMsgAddressList(const FdbMsgAddressList& from);
  FdbMsgAddressList(FdbMsgAddressList&& from) noexcept
    : FdbMsgAddressList() {
    *this = ::std::move(from);
  }

  inline FdbMsgAddressList& operator=(const FdbMsgAddressList& from) {
    CopyFrom(from);
    return *this;
  }
  inline FdbMsgAddressList& operator=(FdbMsgAddressList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FdbMsgAddressList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FdbMsgAddressList* internal_default_instance() {
    return reinterpret_cast<const FdbMsgAddressList*>(
               &_FdbMsgAddressList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FdbMsgAddressList& a, FdbMsgAddressList& b) {
    a.Swap(&b);
  }
  inline void Swap(FdbMsgAddressList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FdbMsgAddressList* New() const final {
    return CreateMaybeMessage<FdbMsgAddressList>(nullptr);
  }

  FdbMsgAddressList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FdbMsgAddressList>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FdbMsgAddressList& from);
  void MergeFrom(const FdbMsgAddressList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FdbMsgAddressList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFdbBase.FdbMsgAddressList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressListFieldNumber = 4,
    kServiceNameFieldNumber = 1,
    kHostNameFieldNumber = 2,
    kTokenListFieldNumber = 5,
    kIsLocalFieldNumber = 3,
  };
  // repeated string address_list = 4;
  int address_list_size() const;
  private:
  int _internal_address_list_size() const;
  public:
  void clear_address_list();
  const std::string& address_list(int index) const;
  std::string* mutable_address_list(int index);
  void set_address_list(int index, const std::string& value);
  void set_address_list(int index, std::string&& value);
  void set_address_list(int index, const char* value);
  void set_address_list(int index, const char* value, size_t size);
  std::string* add_address_list();
  void add_address_list(const std::string& value);
  void add_address_list(std::string&& value);
  void add_address_list(const char* value);
  void add_address_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& address_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_address_list();
  private:
  const std::string& _internal_address_list(int index) const;
  std::string* _internal_add_address_list();
  public:

  // required string service_name = 1;
  bool has_service_name() const;
  private:
  bool _internal_has_service_name() const;
  public:
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // required string host_name = 2;
  bool has_host_name() const;
  private:
  bool _internal_has_host_name() const;
  public:
  void clear_host_name();
  const std::string& host_name() const;
  void set_host_name(const std::string& value);
  void set_host_name(std::string&& value);
  void set_host_name(const char* value);
  void set_host_name(const char* value, size_t size);
  std::string* mutable_host_name();
  std::string* release_host_name();
  void set_allocated_host_name(std::string* host_name);
  private:
  const std::string& _internal_host_name() const;
  void _internal_set_host_name(const std::string& value);
  std::string* _internal_mutable_host_name();
  public:

  // optional .NFdbBase.FdbMsgTokens token_list = 5;
  bool has_token_list() const;
  private:
  bool _internal_has_token_list() const;
  public:
  void clear_token_list();
  const ::NFdbBase::FdbMsgTokens& token_list() const;
  ::NFdbBase::FdbMsgTokens* release_token_list();
  ::NFdbBase::FdbMsgTokens* mutable_token_list();
  void set_allocated_token_list(::NFdbBase::FdbMsgTokens* token_list);
  private:
  const ::NFdbBase::FdbMsgTokens& _internal_token_list() const;
  ::NFdbBase::FdbMsgTokens* _internal_mutable_token_list();
  public:

  // required bool is_local = 3;
  bool has_is_local() const;
  private:
  bool _internal_has_is_local() const;
  public:
  void clear_is_local();
  bool is_local() const;
  void set_is_local(bool value);
  private:
  bool _internal_is_local() const;
  void _internal_set_is_local(bool value);
  public:

  // @@protoc_insertion_point(class_scope:NFdbBase.FdbMsgAddressList)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> address_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_name_;
  ::NFdbBase::FdbMsgTokens* token_list_;
  bool is_local_;
  friend struct ::TableStruct_common_2ebase_2eNameServer_2eproto;
};
// -------------------------------------------------------------------

class FdbMsgServerName :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:NFdbBase.FdbMsgServerName) */ {
 public:
  FdbMsgServerName();
  virtual ~FdbMsgServerName();

  FdbMsgServerName(const FdbMsgServerName& from);
  FdbMsgServerName(FdbMsgServerName&& from) noexcept
    : FdbMsgServerName() {
    *this = ::std::move(from);
  }

  inline FdbMsgServerName& operator=(const FdbMsgServerName& from) {
    CopyFrom(from);
    return *this;
  }
  inline FdbMsgServerName& operator=(FdbMsgServerName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FdbMsgServerName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FdbMsgServerName* internal_default_instance() {
    return reinterpret_cast<const FdbMsgServerName*>(
               &_FdbMsgServerName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FdbMsgServerName& a, FdbMsgServerName& b) {
    a.Swap(&b);
  }
  inline void Swap(FdbMsgServerName* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FdbMsgServerName* New() const final {
    return CreateMaybeMessage<FdbMsgServerName>(nullptr);
  }

  FdbMsgServerName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FdbMsgServerName>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FdbMsgServerName& from);
  void MergeFrom(const FdbMsgServerName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FdbMsgServerName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFdbBase.FdbMsgServerName";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:NFdbBase.FdbMsgServerName)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_common_2ebase_2eNameServer_2eproto;
};
// -------------------------------------------------------------------

class FdbMsgHostList :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:NFdbBase.FdbMsgHostList) */ {
 public:
  FdbMsgHostList();
  virtual ~FdbMsgHostList();

  FdbMsgHostList(const FdbMsgHostList& from);
  FdbMsgHostList(FdbMsgHostList&& from) noexcept
    : FdbMsgHostList() {
    *this = ::std::move(from);
  }

  inline FdbMsgHostList& operator=(const FdbMsgHostList& from) {
    CopyFrom(from);
    return *this;
  }
  inline FdbMsgHostList& operator=(FdbMsgHostList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FdbMsgHostList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FdbMsgHostList* internal_default_instance() {
    return reinterpret_cast<const FdbMsgHostList*>(
               &_FdbMsgHostList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FdbMsgHostList& a, FdbMsgHostList& b) {
    a.Swap(&b);
  }
  inline void Swap(FdbMsgHostList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FdbMsgHostList* New() const final {
    return CreateMaybeMessage<FdbMsgHostList>(nullptr);
  }

  FdbMsgHostList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FdbMsgHostList>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FdbMsgHostList& from);
  void MergeFrom(const FdbMsgHostList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FdbMsgHostList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFdbBase.FdbMsgHostList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressListFieldNumber = 1,
  };
  // repeated string address_list = 1;
  int address_list_size() const;
  private:
  int _internal_address_list_size() const;
  public:
  void clear_address_list();
  const std::string& address_list(int index) const;
  std::string* mutable_address_list(int index);
  void set_address_list(int index, const std::string& value);
  void set_address_list(int index, std::string&& value);
  void set_address_list(int index, const char* value);
  void set_address_list(int index, const char* value, size_t size);
  std::string* add_address_list();
  void add_address_list(const std::string& value);
  void add_address_list(std::string&& value);
  void add_address_list(const char* value);
  void add_address_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& address_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_address_list();
  private:
  const std::string& _internal_address_list(int index) const;
  std::string* _internal_add_address_list();
  public:

  // @@protoc_insertion_point(class_scope:NFdbBase.FdbMsgHostList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> address_list_;
  friend struct ::TableStruct_common_2ebase_2eNameServer_2eproto;
};
// -------------------------------------------------------------------

class FdbMsgHostAddress :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:NFdbBase.FdbMsgHostAddress) */ {
 public:
  FdbMsgHostAddress();
  virtual ~FdbMsgHostAddress();

  FdbMsgHostAddress(const FdbMsgHostAddress& from);
  FdbMsgHostAddress(FdbMsgHostAddress&& from) noexcept
    : FdbMsgHostAddress() {
    *this = ::std::move(from);
  }

  inline FdbMsgHostAddress& operator=(const FdbMsgHostAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline FdbMsgHostAddress& operator=(FdbMsgHostAddress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FdbMsgHostAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FdbMsgHostAddress* internal_default_instance() {
    return reinterpret_cast<const FdbMsgHostAddress*>(
               &_FdbMsgHostAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FdbMsgHostAddress& a, FdbMsgHostAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(FdbMsgHostAddress* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FdbMsgHostAddress* New() const final {
    return CreateMaybeMessage<FdbMsgHostAddress>(nullptr);
  }

  FdbMsgHostAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FdbMsgHostAddress>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FdbMsgHostAddress& from);
  void MergeFrom(const FdbMsgHostAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FdbMsgHostAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFdbBase.FdbMsgHostAddress";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpAddressFieldNumber = 1,
    kNsUrlFieldNumber = 2,
    kHostNameFieldNumber = 3,
    kTokenListFieldNumber = 4,
  };
  // required string ip_address = 1;
  bool has_ip_address() const;
  private:
  bool _internal_has_ip_address() const;
  public:
  void clear_ip_address();
  const std::string& ip_address() const;
  void set_ip_address(const std::string& value);
  void set_ip_address(std::string&& value);
  void set_ip_address(const char* value);
  void set_ip_address(const char* value, size_t size);
  std::string* mutable_ip_address();
  std::string* release_ip_address();
  void set_allocated_ip_address(std::string* ip_address);
  private:
  const std::string& _internal_ip_address() const;
  void _internal_set_ip_address(const std::string& value);
  std::string* _internal_mutable_ip_address();
  public:

  // required string ns_url = 2;
  bool has_ns_url() const;
  private:
  bool _internal_has_ns_url() const;
  public:
  void clear_ns_url();
  const std::string& ns_url() const;
  void set_ns_url(const std::string& value);
  void set_ns_url(std::string&& value);
  void set_ns_url(const char* value);
  void set_ns_url(const char* value, size_t size);
  std::string* mutable_ns_url();
  std::string* release_ns_url();
  void set_allocated_ns_url(std::string* ns_url);
  private:
  const std::string& _internal_ns_url() const;
  void _internal_set_ns_url(const std::string& value);
  std::string* _internal_mutable_ns_url();
  public:

  // required string host_name = 3;
  bool has_host_name() const;
  private:
  bool _internal_has_host_name() const;
  public:
  void clear_host_name();
  const std::string& host_name() const;
  void set_host_name(const std::string& value);
  void set_host_name(std::string&& value);
  void set_host_name(const char* value);
  void set_host_name(const char* value, size_t size);
  std::string* mutable_host_name();
  std::string* release_host_name();
  void set_allocated_host_name(std::string* host_name);
  private:
  const std::string& _internal_host_name() const;
  void _internal_set_host_name(const std::string& value);
  std::string* _internal_mutable_host_name();
  public:

  // optional .NFdbBase.FdbMsgTokens token_list = 4;
  bool has_token_list() const;
  private:
  bool _internal_has_token_list() const;
  public:
  void clear_token_list();
  const ::NFdbBase::FdbMsgTokens& token_list() const;
  ::NFdbBase::FdbMsgTokens* release_token_list();
  ::NFdbBase::FdbMsgTokens* mutable_token_list();
  void set_allocated_token_list(::NFdbBase::FdbMsgTokens* token_list);
  private:
  const ::NFdbBase::FdbMsgTokens& _internal_token_list() const;
  ::NFdbBase::FdbMsgTokens* _internal_mutable_token_list();
  public:

  // @@protoc_insertion_point(class_scope:NFdbBase.FdbMsgHostAddress)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ns_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_name_;
  ::NFdbBase::FdbMsgTokens* token_list_;
  friend struct ::TableStruct_common_2ebase_2eNameServer_2eproto;
};
// -------------------------------------------------------------------

class FdbMsgHostRegisterAck :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:NFdbBase.FdbMsgHostRegisterAck) */ {
 public:
  FdbMsgHostRegisterAck();
  virtual ~FdbMsgHostRegisterAck();

  FdbMsgHostRegisterAck(const FdbMsgHostRegisterAck& from);
  FdbMsgHostRegisterAck(FdbMsgHostRegisterAck&& from) noexcept
    : FdbMsgHostRegisterAck() {
    *this = ::std::move(from);
  }

  inline FdbMsgHostRegisterAck& operator=(const FdbMsgHostRegisterAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline FdbMsgHostRegisterAck& operator=(FdbMsgHostRegisterAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FdbMsgHostRegisterAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FdbMsgHostRegisterAck* internal_default_instance() {
    return reinterpret_cast<const FdbMsgHostRegisterAck*>(
               &_FdbMsgHostRegisterAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FdbMsgHostRegisterAck& a, FdbMsgHostRegisterAck& b) {
    a.Swap(&b);
  }
  inline void Swap(FdbMsgHostRegisterAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FdbMsgHostRegisterAck* New() const final {
    return CreateMaybeMessage<FdbMsgHostRegisterAck>(nullptr);
  }

  FdbMsgHostRegisterAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FdbMsgHostRegisterAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FdbMsgHostRegisterAck& from);
  void MergeFrom(const FdbMsgHostRegisterAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FdbMsgHostRegisterAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFdbBase.FdbMsgHostRegisterAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenListFieldNumber = 1,
  };
  // optional .NFdbBase.FdbMsgTokens token_list = 1;
  bool has_token_list() const;
  private:
  bool _internal_has_token_list() const;
  public:
  void clear_token_list();
  const ::NFdbBase::FdbMsgTokens& token_list() const;
  ::NFdbBase::FdbMsgTokens* release_token_list();
  ::NFdbBase::FdbMsgTokens* mutable_token_list();
  void set_allocated_token_list(::NFdbBase::FdbMsgTokens* token_list);
  private:
  const ::NFdbBase::FdbMsgTokens& _internal_token_list() const;
  ::NFdbBase::FdbMsgTokens* _internal_mutable_token_list();
  public:

  // @@protoc_insertion_point(class_scope:NFdbBase.FdbMsgHostRegisterAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::NFdbBase::FdbMsgTokens* token_list_;
  friend struct ::TableStruct_common_2ebase_2eNameServer_2eproto;
};
// -------------------------------------------------------------------

class FdbMsgHostInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:NFdbBase.FdbMsgHostInfo) */ {
 public:
  FdbMsgHostInfo();
  virtual ~FdbMsgHostInfo();

  FdbMsgHostInfo(const FdbMsgHostInfo& from);
  FdbMsgHostInfo(FdbMsgHostInfo&& from) noexcept
    : FdbMsgHostInfo() {
    *this = ::std::move(from);
  }

  inline FdbMsgHostInfo& operator=(const FdbMsgHostInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FdbMsgHostInfo& operator=(FdbMsgHostInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FdbMsgHostInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FdbMsgHostInfo* internal_default_instance() {
    return reinterpret_cast<const FdbMsgHostInfo*>(
               &_FdbMsgHostInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FdbMsgHostInfo& a, FdbMsgHostInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FdbMsgHostInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FdbMsgHostInfo* New() const final {
    return CreateMaybeMessage<FdbMsgHostInfo>(nullptr);
  }

  FdbMsgHostInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FdbMsgHostInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FdbMsgHostInfo& from);
  void MergeFrom(const FdbMsgHostInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FdbMsgHostInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFdbBase.FdbMsgHostInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:NFdbBase.FdbMsgHostInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_common_2ebase_2eNameServer_2eproto;
};
// -------------------------------------------------------------------

class FdbMsgHostAddressList :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:NFdbBase.FdbMsgHostAddressList) */ {
 public:
  FdbMsgHostAddressList();
  virtual ~FdbMsgHostAddressList();

  FdbMsgHostAddressList(const FdbMsgHostAddressList& from);
  FdbMsgHostAddressList(FdbMsgHostAddressList&& from) noexcept
    : FdbMsgHostAddressList() {
    *this = ::std::move(from);
  }

  inline FdbMsgHostAddressList& operator=(const FdbMsgHostAddressList& from) {
    CopyFrom(from);
    return *this;
  }
  inline FdbMsgHostAddressList& operator=(FdbMsgHostAddressList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FdbMsgHostAddressList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FdbMsgHostAddressList* internal_default_instance() {
    return reinterpret_cast<const FdbMsgHostAddressList*>(
               &_FdbMsgHostAddressList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FdbMsgHostAddressList& a, FdbMsgHostAddressList& b) {
    a.Swap(&b);
  }
  inline void Swap(FdbMsgHostAddressList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FdbMsgHostAddressList* New() const final {
    return CreateMaybeMessage<FdbMsgHostAddressList>(nullptr);
  }

  FdbMsgHostAddressList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FdbMsgHostAddressList>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FdbMsgHostAddressList& from);
  void MergeFrom(const FdbMsgHostAddressList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FdbMsgHostAddressList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFdbBase.FdbMsgHostAddressList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressListFieldNumber = 1,
  };
  // repeated .NFdbBase.FdbMsgHostAddress address_list = 1;
  int address_list_size() const;
  private:
  int _internal_address_list_size() const;
  public:
  void clear_address_list();
  ::NFdbBase::FdbMsgHostAddress* mutable_address_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFdbBase::FdbMsgHostAddress >*
      mutable_address_list();
  private:
  const ::NFdbBase::FdbMsgHostAddress& _internal_address_list(int index) const;
  ::NFdbBase::FdbMsgHostAddress* _internal_add_address_list();
  public:
  const ::NFdbBase::FdbMsgHostAddress& address_list(int index) const;
  ::NFdbBase::FdbMsgHostAddress* add_address_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFdbBase::FdbMsgHostAddress >&
      address_list() const;

  // @@protoc_insertion_point(class_scope:NFdbBase.FdbMsgHostAddressList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFdbBase::FdbMsgHostAddress > address_list_;
  friend struct ::TableStruct_common_2ebase_2eNameServer_2eproto;
};
// -------------------------------------------------------------------

class FdbMsgServiceInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:NFdbBase.FdbMsgServiceInfo) */ {
 public:
  FdbMsgServiceInfo();
  virtual ~FdbMsgServiceInfo();

  FdbMsgServiceInfo(const FdbMsgServiceInfo& from);
  FdbMsgServiceInfo(FdbMsgServiceInfo&& from) noexcept
    : FdbMsgServiceInfo() {
    *this = ::std::move(from);
  }

  inline FdbMsgServiceInfo& operator=(const FdbMsgServiceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FdbMsgServiceInfo& operator=(FdbMsgServiceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FdbMsgServiceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FdbMsgServiceInfo* internal_default_instance() {
    return reinterpret_cast<const FdbMsgServiceInfo*>(
               &_FdbMsgServiceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FdbMsgServiceInfo& a, FdbMsgServiceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FdbMsgServiceInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FdbMsgServiceInfo* New() const final {
    return CreateMaybeMessage<FdbMsgServiceInfo>(nullptr);
  }

  FdbMsgServiceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FdbMsgServiceInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FdbMsgServiceInfo& from);
  void MergeFrom(const FdbMsgServiceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FdbMsgServiceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFdbBase.FdbMsgServiceInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceAddrFieldNumber = 1,
    kHostAddrFieldNumber = 2,
  };
  // required .NFdbBase.FdbMsgAddressList service_addr = 1;
  bool has_service_addr() const;
  private:
  bool _internal_has_service_addr() const;
  public:
  void clear_service_addr();
  const ::NFdbBase::FdbMsgAddressList& service_addr() const;
  ::NFdbBase::FdbMsgAddressList* release_service_addr();
  ::NFdbBase::FdbMsgAddressList* mutable_service_addr();
  void set_allocated_service_addr(::NFdbBase::FdbMsgAddressList* service_addr);
  private:
  const ::NFdbBase::FdbMsgAddressList& _internal_service_addr() const;
  ::NFdbBase::FdbMsgAddressList* _internal_mutable_service_addr();
  public:

  // required .NFdbBase.FdbMsgHostAddress host_addr = 2;
  bool has_host_addr() const;
  private:
  bool _internal_has_host_addr() const;
  public:
  void clear_host_addr();
  const ::NFdbBase::FdbMsgHostAddress& host_addr() const;
  ::NFdbBase::FdbMsgHostAddress* release_host_addr();
  ::NFdbBase::FdbMsgHostAddress* mutable_host_addr();
  void set_allocated_host_addr(::NFdbBase::FdbMsgHostAddress* host_addr);
  private:
  const ::NFdbBase::FdbMsgHostAddress& _internal_host_addr() const;
  ::NFdbBase::FdbMsgHostAddress* _internal_mutable_host_addr();
  public:

  // @@protoc_insertion_point(class_scope:NFdbBase.FdbMsgServiceInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::NFdbBase::FdbMsgAddressList* service_addr_;
  ::NFdbBase::FdbMsgHostAddress* host_addr_;
  friend struct ::TableStruct_common_2ebase_2eNameServer_2eproto;
};
// -------------------------------------------------------------------

class FdbMsgServiceTable :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:NFdbBase.FdbMsgServiceTable) */ {
 public:
  FdbMsgServiceTable();
  virtual ~FdbMsgServiceTable();

  FdbMsgServiceTable(const FdbMsgServiceTable& from);
  FdbMsgServiceTable(FdbMsgServiceTable&& from) noexcept
    : FdbMsgServiceTable() {
    *this = ::std::move(from);
  }

  inline FdbMsgServiceTable& operator=(const FdbMsgServiceTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline FdbMsgServiceTable& operator=(FdbMsgServiceTable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FdbMsgServiceTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FdbMsgServiceTable* internal_default_instance() {
    return reinterpret_cast<const FdbMsgServiceTable*>(
               &_FdbMsgServiceTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FdbMsgServiceTable& a, FdbMsgServiceTable& b) {
    a.Swap(&b);
  }
  inline void Swap(FdbMsgServiceTable* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FdbMsgServiceTable* New() const final {
    return CreateMaybeMessage<FdbMsgServiceTable>(nullptr);
  }

  FdbMsgServiceTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FdbMsgServiceTable>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FdbMsgServiceTable& from);
  void MergeFrom(const FdbMsgServiceTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FdbMsgServiceTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFdbBase.FdbMsgServiceTable";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceTblFieldNumber = 1,
  };
  // repeated .NFdbBase.FdbMsgServiceInfo service_tbl = 1;
  int service_tbl_size() const;
  private:
  int _internal_service_tbl_size() const;
  public:
  void clear_service_tbl();
  ::NFdbBase::FdbMsgServiceInfo* mutable_service_tbl(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFdbBase::FdbMsgServiceInfo >*
      mutable_service_tbl();
  private:
  const ::NFdbBase::FdbMsgServiceInfo& _internal_service_tbl(int index) const;
  ::NFdbBase::FdbMsgServiceInfo* _internal_add_service_tbl();
  public:
  const ::NFdbBase::FdbMsgServiceInfo& service_tbl(int index) const;
  ::NFdbBase::FdbMsgServiceInfo* add_service_tbl();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFdbBase::FdbMsgServiceInfo >&
      service_tbl() const;

  // @@protoc_insertion_point(class_scope:NFdbBase.FdbMsgServiceTable)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFdbBase::FdbMsgServiceInfo > service_tbl_;
  friend struct ::TableStruct_common_2ebase_2eNameServer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FdbMsgAddressList

// required string service_name = 1;
inline bool FdbMsgAddressList::_internal_has_service_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FdbMsgAddressList::has_service_name() const {
  return _internal_has_service_name();
}
inline void FdbMsgAddressList::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FdbMsgAddressList::service_name() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMsgAddressList.service_name)
  return _internal_service_name();
}
inline void FdbMsgAddressList::set_service_name(const std::string& value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMsgAddressList.service_name)
}
inline std::string* FdbMsgAddressList::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:NFdbBase.FdbMsgAddressList.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& FdbMsgAddressList::_internal_service_name() const {
  return service_name_.GetNoArena();
}
inline void FdbMsgAddressList::_internal_set_service_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FdbMsgAddressList::set_service_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  service_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFdbBase.FdbMsgAddressList.service_name)
}
inline void FdbMsgAddressList::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFdbBase.FdbMsgAddressList.service_name)
}
inline void FdbMsgAddressList::set_service_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFdbBase.FdbMsgAddressList.service_name)
}
inline std::string* FdbMsgAddressList::_internal_mutable_service_name() {
  _has_bits_[0] |= 0x00000001u;
  return service_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FdbMsgAddressList::release_service_name() {
  // @@protoc_insertion_point(field_release:NFdbBase.FdbMsgAddressList.service_name)
  if (!has_service_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return service_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FdbMsgAddressList::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  service_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:NFdbBase.FdbMsgAddressList.service_name)
}

// required string host_name = 2;
inline bool FdbMsgAddressList::_internal_has_host_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FdbMsgAddressList::has_host_name() const {
  return _internal_has_host_name();
}
inline void FdbMsgAddressList::clear_host_name() {
  host_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FdbMsgAddressList::host_name() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMsgAddressList.host_name)
  return _internal_host_name();
}
inline void FdbMsgAddressList::set_host_name(const std::string& value) {
  _internal_set_host_name(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMsgAddressList.host_name)
}
inline std::string* FdbMsgAddressList::mutable_host_name() {
  // @@protoc_insertion_point(field_mutable:NFdbBase.FdbMsgAddressList.host_name)
  return _internal_mutable_host_name();
}
inline const std::string& FdbMsgAddressList::_internal_host_name() const {
  return host_name_.GetNoArena();
}
inline void FdbMsgAddressList::_internal_set_host_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  host_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FdbMsgAddressList::set_host_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  host_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFdbBase.FdbMsgAddressList.host_name)
}
inline void FdbMsgAddressList::set_host_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  host_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFdbBase.FdbMsgAddressList.host_name)
}
inline void FdbMsgAddressList::set_host_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  host_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFdbBase.FdbMsgAddressList.host_name)
}
inline std::string* FdbMsgAddressList::_internal_mutable_host_name() {
  _has_bits_[0] |= 0x00000002u;
  return host_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FdbMsgAddressList::release_host_name() {
  // @@protoc_insertion_point(field_release:NFdbBase.FdbMsgAddressList.host_name)
  if (!has_host_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return host_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FdbMsgAddressList::set_allocated_host_name(std::string* host_name) {
  if (host_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  host_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host_name);
  // @@protoc_insertion_point(field_set_allocated:NFdbBase.FdbMsgAddressList.host_name)
}

// required bool is_local = 3;
inline bool FdbMsgAddressList::_internal_has_is_local() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FdbMsgAddressList::has_is_local() const {
  return _internal_has_is_local();
}
inline void FdbMsgAddressList::clear_is_local() {
  is_local_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool FdbMsgAddressList::_internal_is_local() const {
  return is_local_;
}
inline bool FdbMsgAddressList::is_local() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMsgAddressList.is_local)
  return _internal_is_local();
}
inline void FdbMsgAddressList::_internal_set_is_local(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_local_ = value;
}
inline void FdbMsgAddressList::set_is_local(bool value) {
  _internal_set_is_local(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMsgAddressList.is_local)
}

// repeated string address_list = 4;
inline int FdbMsgAddressList::_internal_address_list_size() const {
  return address_list_.size();
}
inline int FdbMsgAddressList::address_list_size() const {
  return _internal_address_list_size();
}
inline void FdbMsgAddressList::clear_address_list() {
  address_list_.Clear();
}
inline std::string* FdbMsgAddressList::add_address_list() {
  // @@protoc_insertion_point(field_add_mutable:NFdbBase.FdbMsgAddressList.address_list)
  return _internal_add_address_list();
}
inline const std::string& FdbMsgAddressList::_internal_address_list(int index) const {
  return address_list_.Get(index);
}
inline const std::string& FdbMsgAddressList::address_list(int index) const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMsgAddressList.address_list)
  return _internal_address_list(index);
}
inline std::string* FdbMsgAddressList::mutable_address_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFdbBase.FdbMsgAddressList.address_list)
  return address_list_.Mutable(index);
}
inline void FdbMsgAddressList::set_address_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMsgAddressList.address_list)
  address_list_.Mutable(index)->assign(value);
}
inline void FdbMsgAddressList::set_address_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMsgAddressList.address_list)
  address_list_.Mutable(index)->assign(std::move(value));
}
inline void FdbMsgAddressList::set_address_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  address_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFdbBase.FdbMsgAddressList.address_list)
}
inline void FdbMsgAddressList::set_address_list(int index, const char* value, size_t size) {
  address_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFdbBase.FdbMsgAddressList.address_list)
}
inline std::string* FdbMsgAddressList::_internal_add_address_list() {
  return address_list_.Add();
}
inline void FdbMsgAddressList::add_address_list(const std::string& value) {
  address_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFdbBase.FdbMsgAddressList.address_list)
}
inline void FdbMsgAddressList::add_address_list(std::string&& value) {
  address_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFdbBase.FdbMsgAddressList.address_list)
}
inline void FdbMsgAddressList::add_address_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  address_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFdbBase.FdbMsgAddressList.address_list)
}
inline void FdbMsgAddressList::add_address_list(const char* value, size_t size) {
  address_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFdbBase.FdbMsgAddressList.address_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FdbMsgAddressList::address_list() const {
  // @@protoc_insertion_point(field_list:NFdbBase.FdbMsgAddressList.address_list)
  return address_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FdbMsgAddressList::mutable_address_list() {
  // @@protoc_insertion_point(field_mutable_list:NFdbBase.FdbMsgAddressList.address_list)
  return &address_list_;
}

// optional .NFdbBase.FdbMsgTokens token_list = 5;
inline bool FdbMsgAddressList::_internal_has_token_list() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || token_list_ != nullptr);
  return value;
}
inline bool FdbMsgAddressList::has_token_list() const {
  return _internal_has_token_list();
}
inline const ::NFdbBase::FdbMsgTokens& FdbMsgAddressList::_internal_token_list() const {
  const ::NFdbBase::FdbMsgTokens* p = token_list_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NFdbBase::FdbMsgTokens*>(
      &::NFdbBase::_FdbMsgTokens_default_instance_);
}
inline const ::NFdbBase::FdbMsgTokens& FdbMsgAddressList::token_list() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMsgAddressList.token_list)
  return _internal_token_list();
}
inline ::NFdbBase::FdbMsgTokens* FdbMsgAddressList::release_token_list() {
  // @@protoc_insertion_point(field_release:NFdbBase.FdbMsgAddressList.token_list)
  _has_bits_[0] &= ~0x00000004u;
  ::NFdbBase::FdbMsgTokens* temp = token_list_;
  token_list_ = nullptr;
  return temp;
}
inline ::NFdbBase::FdbMsgTokens* FdbMsgAddressList::_internal_mutable_token_list() {
  _has_bits_[0] |= 0x00000004u;
  if (token_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFdbBase::FdbMsgTokens>(GetArenaNoVirtual());
    token_list_ = p;
  }
  return token_list_;
}
inline ::NFdbBase::FdbMsgTokens* FdbMsgAddressList::mutable_token_list() {
  // @@protoc_insertion_point(field_mutable:NFdbBase.FdbMsgAddressList.token_list)
  return _internal_mutable_token_list();
}
inline void FdbMsgAddressList::set_allocated_token_list(::NFdbBase::FdbMsgTokens* token_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(token_list_);
  }
  if (token_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      token_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token_list, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  token_list_ = token_list;
  // @@protoc_insertion_point(field_set_allocated:NFdbBase.FdbMsgAddressList.token_list)
}

// -------------------------------------------------------------------

// FdbMsgServerName

// required string name = 1;
inline bool FdbMsgServerName::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FdbMsgServerName::has_name() const {
  return _internal_has_name();
}
inline void FdbMsgServerName::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FdbMsgServerName::name() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMsgServerName.name)
  return _internal_name();
}
inline void FdbMsgServerName::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMsgServerName.name)
}
inline std::string* FdbMsgServerName::mutable_name() {
  // @@protoc_insertion_point(field_mutable:NFdbBase.FdbMsgServerName.name)
  return _internal_mutable_name();
}
inline const std::string& FdbMsgServerName::_internal_name() const {
  return name_.GetNoArena();
}
inline void FdbMsgServerName::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FdbMsgServerName::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFdbBase.FdbMsgServerName.name)
}
inline void FdbMsgServerName::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFdbBase.FdbMsgServerName.name)
}
inline void FdbMsgServerName::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFdbBase.FdbMsgServerName.name)
}
inline std::string* FdbMsgServerName::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FdbMsgServerName::release_name() {
  // @@protoc_insertion_point(field_release:NFdbBase.FdbMsgServerName.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FdbMsgServerName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NFdbBase.FdbMsgServerName.name)
}

// -------------------------------------------------------------------

// FdbMsgHostList

// repeated string address_list = 1;
inline int FdbMsgHostList::_internal_address_list_size() const {
  return address_list_.size();
}
inline int FdbMsgHostList::address_list_size() const {
  return _internal_address_list_size();
}
inline void FdbMsgHostList::clear_address_list() {
  address_list_.Clear();
}
inline std::string* FdbMsgHostList::add_address_list() {
  // @@protoc_insertion_point(field_add_mutable:NFdbBase.FdbMsgHostList.address_list)
  return _internal_add_address_list();
}
inline const std::string& FdbMsgHostList::_internal_address_list(int index) const {
  return address_list_.Get(index);
}
inline const std::string& FdbMsgHostList::address_list(int index) const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMsgHostList.address_list)
  return _internal_address_list(index);
}
inline std::string* FdbMsgHostList::mutable_address_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFdbBase.FdbMsgHostList.address_list)
  return address_list_.Mutable(index);
}
inline void FdbMsgHostList::set_address_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMsgHostList.address_list)
  address_list_.Mutable(index)->assign(value);
}
inline void FdbMsgHostList::set_address_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMsgHostList.address_list)
  address_list_.Mutable(index)->assign(std::move(value));
}
inline void FdbMsgHostList::set_address_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  address_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFdbBase.FdbMsgHostList.address_list)
}
inline void FdbMsgHostList::set_address_list(int index, const char* value, size_t size) {
  address_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFdbBase.FdbMsgHostList.address_list)
}
inline std::string* FdbMsgHostList::_internal_add_address_list() {
  return address_list_.Add();
}
inline void FdbMsgHostList::add_address_list(const std::string& value) {
  address_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFdbBase.FdbMsgHostList.address_list)
}
inline void FdbMsgHostList::add_address_list(std::string&& value) {
  address_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFdbBase.FdbMsgHostList.address_list)
}
inline void FdbMsgHostList::add_address_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  address_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFdbBase.FdbMsgHostList.address_list)
}
inline void FdbMsgHostList::add_address_list(const char* value, size_t size) {
  address_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFdbBase.FdbMsgHostList.address_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FdbMsgHostList::address_list() const {
  // @@protoc_insertion_point(field_list:NFdbBase.FdbMsgHostList.address_list)
  return address_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FdbMsgHostList::mutable_address_list() {
  // @@protoc_insertion_point(field_mutable_list:NFdbBase.FdbMsgHostList.address_list)
  return &address_list_;
}

// -------------------------------------------------------------------

// FdbMsgHostAddress

// required string ip_address = 1;
inline bool FdbMsgHostAddress::_internal_has_ip_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FdbMsgHostAddress::has_ip_address() const {
  return _internal_has_ip_address();
}
inline void FdbMsgHostAddress::clear_ip_address() {
  ip_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FdbMsgHostAddress::ip_address() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMsgHostAddress.ip_address)
  return _internal_ip_address();
}
inline void FdbMsgHostAddress::set_ip_address(const std::string& value) {
  _internal_set_ip_address(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMsgHostAddress.ip_address)
}
inline std::string* FdbMsgHostAddress::mutable_ip_address() {
  // @@protoc_insertion_point(field_mutable:NFdbBase.FdbMsgHostAddress.ip_address)
  return _internal_mutable_ip_address();
}
inline const std::string& FdbMsgHostAddress::_internal_ip_address() const {
  return ip_address_.GetNoArena();
}
inline void FdbMsgHostAddress::_internal_set_ip_address(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FdbMsgHostAddress::set_ip_address(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFdbBase.FdbMsgHostAddress.ip_address)
}
inline void FdbMsgHostAddress::set_ip_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ip_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFdbBase.FdbMsgHostAddress.ip_address)
}
inline void FdbMsgHostAddress::set_ip_address(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ip_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFdbBase.FdbMsgHostAddress.ip_address)
}
inline std::string* FdbMsgHostAddress::_internal_mutable_ip_address() {
  _has_bits_[0] |= 0x00000001u;
  return ip_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FdbMsgHostAddress::release_ip_address() {
  // @@protoc_insertion_point(field_release:NFdbBase.FdbMsgHostAddress.ip_address)
  if (!has_ip_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ip_address_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FdbMsgHostAddress::set_allocated_ip_address(std::string* ip_address) {
  if (ip_address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ip_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_address);
  // @@protoc_insertion_point(field_set_allocated:NFdbBase.FdbMsgHostAddress.ip_address)
}

// required string ns_url = 2;
inline bool FdbMsgHostAddress::_internal_has_ns_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FdbMsgHostAddress::has_ns_url() const {
  return _internal_has_ns_url();
}
inline void FdbMsgHostAddress::clear_ns_url() {
  ns_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FdbMsgHostAddress::ns_url() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMsgHostAddress.ns_url)
  return _internal_ns_url();
}
inline void FdbMsgHostAddress::set_ns_url(const std::string& value) {
  _internal_set_ns_url(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMsgHostAddress.ns_url)
}
inline std::string* FdbMsgHostAddress::mutable_ns_url() {
  // @@protoc_insertion_point(field_mutable:NFdbBase.FdbMsgHostAddress.ns_url)
  return _internal_mutable_ns_url();
}
inline const std::string& FdbMsgHostAddress::_internal_ns_url() const {
  return ns_url_.GetNoArena();
}
inline void FdbMsgHostAddress::_internal_set_ns_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ns_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FdbMsgHostAddress::set_ns_url(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ns_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFdbBase.FdbMsgHostAddress.ns_url)
}
inline void FdbMsgHostAddress::set_ns_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ns_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFdbBase.FdbMsgHostAddress.ns_url)
}
inline void FdbMsgHostAddress::set_ns_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ns_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFdbBase.FdbMsgHostAddress.ns_url)
}
inline std::string* FdbMsgHostAddress::_internal_mutable_ns_url() {
  _has_bits_[0] |= 0x00000002u;
  return ns_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FdbMsgHostAddress::release_ns_url() {
  // @@protoc_insertion_point(field_release:NFdbBase.FdbMsgHostAddress.ns_url)
  if (!has_ns_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ns_url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FdbMsgHostAddress::set_allocated_ns_url(std::string* ns_url) {
  if (ns_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ns_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ns_url);
  // @@protoc_insertion_point(field_set_allocated:NFdbBase.FdbMsgHostAddress.ns_url)
}

// required string host_name = 3;
inline bool FdbMsgHostAddress::_internal_has_host_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FdbMsgHostAddress::has_host_name() const {
  return _internal_has_host_name();
}
inline void FdbMsgHostAddress::clear_host_name() {
  host_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& FdbMsgHostAddress::host_name() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMsgHostAddress.host_name)
  return _internal_host_name();
}
inline void FdbMsgHostAddress::set_host_name(const std::string& value) {
  _internal_set_host_name(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMsgHostAddress.host_name)
}
inline std::string* FdbMsgHostAddress::mutable_host_name() {
  // @@protoc_insertion_point(field_mutable:NFdbBase.FdbMsgHostAddress.host_name)
  return _internal_mutable_host_name();
}
inline const std::string& FdbMsgHostAddress::_internal_host_name() const {
  return host_name_.GetNoArena();
}
inline void FdbMsgHostAddress::_internal_set_host_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  host_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FdbMsgHostAddress::set_host_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  host_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFdbBase.FdbMsgHostAddress.host_name)
}
inline void FdbMsgHostAddress::set_host_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  host_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFdbBase.FdbMsgHostAddress.host_name)
}
inline void FdbMsgHostAddress::set_host_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  host_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFdbBase.FdbMsgHostAddress.host_name)
}
inline std::string* FdbMsgHostAddress::_internal_mutable_host_name() {
  _has_bits_[0] |= 0x00000004u;
  return host_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FdbMsgHostAddress::release_host_name() {
  // @@protoc_insertion_point(field_release:NFdbBase.FdbMsgHostAddress.host_name)
  if (!has_host_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return host_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FdbMsgHostAddress::set_allocated_host_name(std::string* host_name) {
  if (host_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  host_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host_name);
  // @@protoc_insertion_point(field_set_allocated:NFdbBase.FdbMsgHostAddress.host_name)
}

// optional .NFdbBase.FdbMsgTokens token_list = 4;
inline bool FdbMsgHostAddress::_internal_has_token_list() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || token_list_ != nullptr);
  return value;
}
inline bool FdbMsgHostAddress::has_token_list() const {
  return _internal_has_token_list();
}
inline const ::NFdbBase::FdbMsgTokens& FdbMsgHostAddress::_internal_token_list() const {
  const ::NFdbBase::FdbMsgTokens* p = token_list_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NFdbBase::FdbMsgTokens*>(
      &::NFdbBase::_FdbMsgTokens_default_instance_);
}
inline const ::NFdbBase::FdbMsgTokens& FdbMsgHostAddress::token_list() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMsgHostAddress.token_list)
  return _internal_token_list();
}
inline ::NFdbBase::FdbMsgTokens* FdbMsgHostAddress::release_token_list() {
  // @@protoc_insertion_point(field_release:NFdbBase.FdbMsgHostAddress.token_list)
  _has_bits_[0] &= ~0x00000008u;
  ::NFdbBase::FdbMsgTokens* temp = token_list_;
  token_list_ = nullptr;
  return temp;
}
inline ::NFdbBase::FdbMsgTokens* FdbMsgHostAddress::_internal_mutable_token_list() {
  _has_bits_[0] |= 0x00000008u;
  if (token_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFdbBase::FdbMsgTokens>(GetArenaNoVirtual());
    token_list_ = p;
  }
  return token_list_;
}
inline ::NFdbBase::FdbMsgTokens* FdbMsgHostAddress::mutable_token_list() {
  // @@protoc_insertion_point(field_mutable:NFdbBase.FdbMsgHostAddress.token_list)
  return _internal_mutable_token_list();
}
inline void FdbMsgHostAddress::set_allocated_token_list(::NFdbBase::FdbMsgTokens* token_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(token_list_);
  }
  if (token_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      token_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token_list, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  token_list_ = token_list;
  // @@protoc_insertion_point(field_set_allocated:NFdbBase.FdbMsgHostAddress.token_list)
}

// -------------------------------------------------------------------

// FdbMsgHostRegisterAck

// optional .NFdbBase.FdbMsgTokens token_list = 1;
inline bool FdbMsgHostRegisterAck::_internal_has_token_list() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || token_list_ != nullptr);
  return value;
}
inline bool FdbMsgHostRegisterAck::has_token_list() const {
  return _internal_has_token_list();
}
inline const ::NFdbBase::FdbMsgTokens& FdbMsgHostRegisterAck::_internal_token_list() const {
  const ::NFdbBase::FdbMsgTokens* p = token_list_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NFdbBase::FdbMsgTokens*>(
      &::NFdbBase::_FdbMsgTokens_default_instance_);
}
inline const ::NFdbBase::FdbMsgTokens& FdbMsgHostRegisterAck::token_list() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMsgHostRegisterAck.token_list)
  return _internal_token_list();
}
inline ::NFdbBase::FdbMsgTokens* FdbMsgHostRegisterAck::release_token_list() {
  // @@protoc_insertion_point(field_release:NFdbBase.FdbMsgHostRegisterAck.token_list)
  _has_bits_[0] &= ~0x00000001u;
  ::NFdbBase::FdbMsgTokens* temp = token_list_;
  token_list_ = nullptr;
  return temp;
}
inline ::NFdbBase::FdbMsgTokens* FdbMsgHostRegisterAck::_internal_mutable_token_list() {
  _has_bits_[0] |= 0x00000001u;
  if (token_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFdbBase::FdbMsgTokens>(GetArenaNoVirtual());
    token_list_ = p;
  }
  return token_list_;
}
inline ::NFdbBase::FdbMsgTokens* FdbMsgHostRegisterAck::mutable_token_list() {
  // @@protoc_insertion_point(field_mutable:NFdbBase.FdbMsgHostRegisterAck.token_list)
  return _internal_mutable_token_list();
}
inline void FdbMsgHostRegisterAck::set_allocated_token_list(::NFdbBase::FdbMsgTokens* token_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(token_list_);
  }
  if (token_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      token_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token_list, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  token_list_ = token_list;
  // @@protoc_insertion_point(field_set_allocated:NFdbBase.FdbMsgHostRegisterAck.token_list)
}

// -------------------------------------------------------------------

// FdbMsgHostInfo

// required string name = 1;
inline bool FdbMsgHostInfo::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FdbMsgHostInfo::has_name() const {
  return _internal_has_name();
}
inline void FdbMsgHostInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FdbMsgHostInfo::name() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMsgHostInfo.name)
  return _internal_name();
}
inline void FdbMsgHostInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMsgHostInfo.name)
}
inline std::string* FdbMsgHostInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:NFdbBase.FdbMsgHostInfo.name)
  return _internal_mutable_name();
}
inline const std::string& FdbMsgHostInfo::_internal_name() const {
  return name_.GetNoArena();
}
inline void FdbMsgHostInfo::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FdbMsgHostInfo::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFdbBase.FdbMsgHostInfo.name)
}
inline void FdbMsgHostInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFdbBase.FdbMsgHostInfo.name)
}
inline void FdbMsgHostInfo::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFdbBase.FdbMsgHostInfo.name)
}
inline std::string* FdbMsgHostInfo::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FdbMsgHostInfo::release_name() {
  // @@protoc_insertion_point(field_release:NFdbBase.FdbMsgHostInfo.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FdbMsgHostInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NFdbBase.FdbMsgHostInfo.name)
}

// -------------------------------------------------------------------

// FdbMsgHostAddressList

// repeated .NFdbBase.FdbMsgHostAddress address_list = 1;
inline int FdbMsgHostAddressList::_internal_address_list_size() const {
  return address_list_.size();
}
inline int FdbMsgHostAddressList::address_list_size() const {
  return _internal_address_list_size();
}
inline void FdbMsgHostAddressList::clear_address_list() {
  address_list_.Clear();
}
inline ::NFdbBase::FdbMsgHostAddress* FdbMsgHostAddressList::mutable_address_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFdbBase.FdbMsgHostAddressList.address_list)
  return address_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFdbBase::FdbMsgHostAddress >*
FdbMsgHostAddressList::mutable_address_list() {
  // @@protoc_insertion_point(field_mutable_list:NFdbBase.FdbMsgHostAddressList.address_list)
  return &address_list_;
}
inline const ::NFdbBase::FdbMsgHostAddress& FdbMsgHostAddressList::_internal_address_list(int index) const {
  return address_list_.Get(index);
}
inline const ::NFdbBase::FdbMsgHostAddress& FdbMsgHostAddressList::address_list(int index) const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMsgHostAddressList.address_list)
  return _internal_address_list(index);
}
inline ::NFdbBase::FdbMsgHostAddress* FdbMsgHostAddressList::_internal_add_address_list() {
  return address_list_.Add();
}
inline ::NFdbBase::FdbMsgHostAddress* FdbMsgHostAddressList::add_address_list() {
  // @@protoc_insertion_point(field_add:NFdbBase.FdbMsgHostAddressList.address_list)
  return _internal_add_address_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFdbBase::FdbMsgHostAddress >&
FdbMsgHostAddressList::address_list() const {
  // @@protoc_insertion_point(field_list:NFdbBase.FdbMsgHostAddressList.address_list)
  return address_list_;
}

// -------------------------------------------------------------------

// FdbMsgServiceInfo

// required .NFdbBase.FdbMsgAddressList service_addr = 1;
inline bool FdbMsgServiceInfo::_internal_has_service_addr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || service_addr_ != nullptr);
  return value;
}
inline bool FdbMsgServiceInfo::has_service_addr() const {
  return _internal_has_service_addr();
}
inline void FdbMsgServiceInfo::clear_service_addr() {
  if (service_addr_ != nullptr) service_addr_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::NFdbBase::FdbMsgAddressList& FdbMsgServiceInfo::_internal_service_addr() const {
  const ::NFdbBase::FdbMsgAddressList* p = service_addr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NFdbBase::FdbMsgAddressList*>(
      &::NFdbBase::_FdbMsgAddressList_default_instance_);
}
inline const ::NFdbBase::FdbMsgAddressList& FdbMsgServiceInfo::service_addr() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMsgServiceInfo.service_addr)
  return _internal_service_addr();
}
inline ::NFdbBase::FdbMsgAddressList* FdbMsgServiceInfo::release_service_addr() {
  // @@protoc_insertion_point(field_release:NFdbBase.FdbMsgServiceInfo.service_addr)
  _has_bits_[0] &= ~0x00000001u;
  ::NFdbBase::FdbMsgAddressList* temp = service_addr_;
  service_addr_ = nullptr;
  return temp;
}
inline ::NFdbBase::FdbMsgAddressList* FdbMsgServiceInfo::_internal_mutable_service_addr() {
  _has_bits_[0] |= 0x00000001u;
  if (service_addr_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFdbBase::FdbMsgAddressList>(GetArenaNoVirtual());
    service_addr_ = p;
  }
  return service_addr_;
}
inline ::NFdbBase::FdbMsgAddressList* FdbMsgServiceInfo::mutable_service_addr() {
  // @@protoc_insertion_point(field_mutable:NFdbBase.FdbMsgServiceInfo.service_addr)
  return _internal_mutable_service_addr();
}
inline void FdbMsgServiceInfo::set_allocated_service_addr(::NFdbBase::FdbMsgAddressList* service_addr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete service_addr_;
  }
  if (service_addr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      service_addr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service_addr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  service_addr_ = service_addr;
  // @@protoc_insertion_point(field_set_allocated:NFdbBase.FdbMsgServiceInfo.service_addr)
}

// required .NFdbBase.FdbMsgHostAddress host_addr = 2;
inline bool FdbMsgServiceInfo::_internal_has_host_addr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || host_addr_ != nullptr);
  return value;
}
inline bool FdbMsgServiceInfo::has_host_addr() const {
  return _internal_has_host_addr();
}
inline void FdbMsgServiceInfo::clear_host_addr() {
  if (host_addr_ != nullptr) host_addr_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::NFdbBase::FdbMsgHostAddress& FdbMsgServiceInfo::_internal_host_addr() const {
  const ::NFdbBase::FdbMsgHostAddress* p = host_addr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NFdbBase::FdbMsgHostAddress*>(
      &::NFdbBase::_FdbMsgHostAddress_default_instance_);
}
inline const ::NFdbBase::FdbMsgHostAddress& FdbMsgServiceInfo::host_addr() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMsgServiceInfo.host_addr)
  return _internal_host_addr();
}
inline ::NFdbBase::FdbMsgHostAddress* FdbMsgServiceInfo::release_host_addr() {
  // @@protoc_insertion_point(field_release:NFdbBase.FdbMsgServiceInfo.host_addr)
  _has_bits_[0] &= ~0x00000002u;
  ::NFdbBase::FdbMsgHostAddress* temp = host_addr_;
  host_addr_ = nullptr;
  return temp;
}
inline ::NFdbBase::FdbMsgHostAddress* FdbMsgServiceInfo::_internal_mutable_host_addr() {
  _has_bits_[0] |= 0x00000002u;
  if (host_addr_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFdbBase::FdbMsgHostAddress>(GetArenaNoVirtual());
    host_addr_ = p;
  }
  return host_addr_;
}
inline ::NFdbBase::FdbMsgHostAddress* FdbMsgServiceInfo::mutable_host_addr() {
  // @@protoc_insertion_point(field_mutable:NFdbBase.FdbMsgServiceInfo.host_addr)
  return _internal_mutable_host_addr();
}
inline void FdbMsgServiceInfo::set_allocated_host_addr(::NFdbBase::FdbMsgHostAddress* host_addr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete host_addr_;
  }
  if (host_addr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      host_addr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host_addr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  host_addr_ = host_addr;
  // @@protoc_insertion_point(field_set_allocated:NFdbBase.FdbMsgServiceInfo.host_addr)
}

// -------------------------------------------------------------------

// FdbMsgServiceTable

// repeated .NFdbBase.FdbMsgServiceInfo service_tbl = 1;
inline int FdbMsgServiceTable::_internal_service_tbl_size() const {
  return service_tbl_.size();
}
inline int FdbMsgServiceTable::service_tbl_size() const {
  return _internal_service_tbl_size();
}
inline void FdbMsgServiceTable::clear_service_tbl() {
  service_tbl_.Clear();
}
inline ::NFdbBase::FdbMsgServiceInfo* FdbMsgServiceTable::mutable_service_tbl(int index) {
  // @@protoc_insertion_point(field_mutable:NFdbBase.FdbMsgServiceTable.service_tbl)
  return service_tbl_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFdbBase::FdbMsgServiceInfo >*
FdbMsgServiceTable::mutable_service_tbl() {
  // @@protoc_insertion_point(field_mutable_list:NFdbBase.FdbMsgServiceTable.service_tbl)
  return &service_tbl_;
}
inline const ::NFdbBase::FdbMsgServiceInfo& FdbMsgServiceTable::_internal_service_tbl(int index) const {
  return service_tbl_.Get(index);
}
inline const ::NFdbBase::FdbMsgServiceInfo& FdbMsgServiceTable::service_tbl(int index) const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMsgServiceTable.service_tbl)
  return _internal_service_tbl(index);
}
inline ::NFdbBase::FdbMsgServiceInfo* FdbMsgServiceTable::_internal_add_service_tbl() {
  return service_tbl_.Add();
}
inline ::NFdbBase::FdbMsgServiceInfo* FdbMsgServiceTable::add_service_tbl() {
  // @@protoc_insertion_point(field_add:NFdbBase.FdbMsgServiceTable.service_tbl)
  return _internal_add_service_tbl();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFdbBase::FdbMsgServiceInfo >&
FdbMsgServiceTable::service_tbl() const {
  // @@protoc_insertion_point(field_list:NFdbBase.FdbMsgServiceTable.service_tbl)
  return service_tbl_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFdbBase

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::NFdbBase::FdbNsMsgCode> : ::std::true_type {};
template <> struct is_proto_enum< ::NFdbBase::FdbHsMsgCode> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2ebase_2eNameServer_2eproto
