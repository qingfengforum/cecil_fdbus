// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.base.Token.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2ebase_2eToken_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2ebase_2eToken_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2ebase_2eToken_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2ebase_2eToken_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace NFdbBase {
class FdbMsgTokens;
class FdbMsgTokensDefaultTypeInternal;
extern FdbMsgTokensDefaultTypeInternal _FdbMsgTokens_default_instance_;
}  // namespace NFdbBase
PROTOBUF_NAMESPACE_OPEN
template<> ::NFdbBase::FdbMsgTokens* Arena::CreateMaybeMessage<::NFdbBase::FdbMsgTokens>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace NFdbBase {

enum FdbCryptoAlgorithm : int {
  CRYPTO_NONE = 1,
  CRYPTO_AES128 = 2,
  CRYPTO_AES192 = 3,
  CRYPTO_AES256 = 4,
  CRYPTO_RSA1024 = 5,
  CRYPTO_RSA2048 = 6,
  CRYPTO_RSA3072 = 7,
  CRYPTO_ECC160 = 8,
  CRYPTO_ECC224 = 9,
  CRYPTO_ECC256 = 10
};
bool FdbCryptoAlgorithm_IsValid(int value);
constexpr FdbCryptoAlgorithm FdbCryptoAlgorithm_MIN = CRYPTO_NONE;
constexpr FdbCryptoAlgorithm FdbCryptoAlgorithm_MAX = CRYPTO_ECC256;
constexpr int FdbCryptoAlgorithm_ARRAYSIZE = FdbCryptoAlgorithm_MAX + 1;

const std::string& FdbCryptoAlgorithm_Name(FdbCryptoAlgorithm value);
template<typename T>
inline const std::string& FdbCryptoAlgorithm_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FdbCryptoAlgorithm>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FdbCryptoAlgorithm_Name.");
  return FdbCryptoAlgorithm_Name(static_cast<FdbCryptoAlgorithm>(enum_t_value));
}
bool FdbCryptoAlgorithm_Parse(
    const std::string& name, FdbCryptoAlgorithm* value);
// ===================================================================

class FdbMsgTokens :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:NFdbBase.FdbMsgTokens) */ {
 public:
  FdbMsgTokens();
  virtual ~FdbMsgTokens();

  FdbMsgTokens(const FdbMsgTokens& from);
  FdbMsgTokens(FdbMsgTokens&& from) noexcept
    : FdbMsgTokens() {
    *this = ::std::move(from);
  }

  inline FdbMsgTokens& operator=(const FdbMsgTokens& from) {
    CopyFrom(from);
    return *this;
  }
  inline FdbMsgTokens& operator=(FdbMsgTokens&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FdbMsgTokens& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FdbMsgTokens* internal_default_instance() {
    return reinterpret_cast<const FdbMsgTokens*>(
               &_FdbMsgTokens_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FdbMsgTokens& a, FdbMsgTokens& b) {
    a.Swap(&b);
  }
  inline void Swap(FdbMsgTokens* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FdbMsgTokens* New() const final {
    return CreateMaybeMessage<FdbMsgTokens>(nullptr);
  }

  FdbMsgTokens* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FdbMsgTokens>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FdbMsgTokens& from);
  void MergeFrom(const FdbMsgTokens& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FdbMsgTokens* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFdbBase.FdbMsgTokens";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokensFieldNumber = 1,
    kCryptoAlgorithmFieldNumber = 2,
  };
  // repeated string tokens = 1;
  int tokens_size() const;
  private:
  int _internal_tokens_size() const;
  public:
  void clear_tokens();
  const std::string& tokens(int index) const;
  std::string* mutable_tokens(int index);
  void set_tokens(int index, const std::string& value);
  void set_tokens(int index, std::string&& value);
  void set_tokens(int index, const char* value);
  void set_tokens(int index, const char* value, size_t size);
  std::string* add_tokens();
  void add_tokens(const std::string& value);
  void add_tokens(std::string&& value);
  void add_tokens(const char* value);
  void add_tokens(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tokens() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tokens();
  private:
  const std::string& _internal_tokens(int index) const;
  std::string* _internal_add_tokens();
  public:

  // required .NFdbBase.FdbCryptoAlgorithm crypto_algorithm = 2;
  bool has_crypto_algorithm() const;
  private:
  bool _internal_has_crypto_algorithm() const;
  public:
  void clear_crypto_algorithm();
  ::NFdbBase::FdbCryptoAlgorithm crypto_algorithm() const;
  void set_crypto_algorithm(::NFdbBase::FdbCryptoAlgorithm value);
  private:
  ::NFdbBase::FdbCryptoAlgorithm _internal_crypto_algorithm() const;
  void _internal_set_crypto_algorithm(::NFdbBase::FdbCryptoAlgorithm value);
  public:

  // @@protoc_insertion_point(class_scope:NFdbBase.FdbMsgTokens)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tokens_;
  int crypto_algorithm_;
  friend struct ::TableStruct_common_2ebase_2eToken_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FdbMsgTokens

// repeated string tokens = 1;
inline int FdbMsgTokens::_internal_tokens_size() const {
  return tokens_.size();
}
inline int FdbMsgTokens::tokens_size() const {
  return _internal_tokens_size();
}
inline void FdbMsgTokens::clear_tokens() {
  tokens_.Clear();
}
inline std::string* FdbMsgTokens::add_tokens() {
  // @@protoc_insertion_point(field_add_mutable:NFdbBase.FdbMsgTokens.tokens)
  return _internal_add_tokens();
}
inline const std::string& FdbMsgTokens::_internal_tokens(int index) const {
  return tokens_.Get(index);
}
inline const std::string& FdbMsgTokens::tokens(int index) const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMsgTokens.tokens)
  return _internal_tokens(index);
}
inline std::string* FdbMsgTokens::mutable_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:NFdbBase.FdbMsgTokens.tokens)
  return tokens_.Mutable(index);
}
inline void FdbMsgTokens::set_tokens(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMsgTokens.tokens)
  tokens_.Mutable(index)->assign(value);
}
inline void FdbMsgTokens::set_tokens(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMsgTokens.tokens)
  tokens_.Mutable(index)->assign(std::move(value));
}
inline void FdbMsgTokens::set_tokens(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tokens_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFdbBase.FdbMsgTokens.tokens)
}
inline void FdbMsgTokens::set_tokens(int index, const char* value, size_t size) {
  tokens_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFdbBase.FdbMsgTokens.tokens)
}
inline std::string* FdbMsgTokens::_internal_add_tokens() {
  return tokens_.Add();
}
inline void FdbMsgTokens::add_tokens(const std::string& value) {
  tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFdbBase.FdbMsgTokens.tokens)
}
inline void FdbMsgTokens::add_tokens(std::string&& value) {
  tokens_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFdbBase.FdbMsgTokens.tokens)
}
inline void FdbMsgTokens::add_tokens(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFdbBase.FdbMsgTokens.tokens)
}
inline void FdbMsgTokens::add_tokens(const char* value, size_t size) {
  tokens_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFdbBase.FdbMsgTokens.tokens)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FdbMsgTokens::tokens() const {
  // @@protoc_insertion_point(field_list:NFdbBase.FdbMsgTokens.tokens)
  return tokens_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FdbMsgTokens::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:NFdbBase.FdbMsgTokens.tokens)
  return &tokens_;
}

// required .NFdbBase.FdbCryptoAlgorithm crypto_algorithm = 2;
inline bool FdbMsgTokens::_internal_has_crypto_algorithm() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FdbMsgTokens::has_crypto_algorithm() const {
  return _internal_has_crypto_algorithm();
}
inline void FdbMsgTokens::clear_crypto_algorithm() {
  crypto_algorithm_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::NFdbBase::FdbCryptoAlgorithm FdbMsgTokens::_internal_crypto_algorithm() const {
  return static_cast< ::NFdbBase::FdbCryptoAlgorithm >(crypto_algorithm_);
}
inline ::NFdbBase::FdbCryptoAlgorithm FdbMsgTokens::crypto_algorithm() const {
  // @@protoc_insertion_point(field_get:NFdbBase.FdbMsgTokens.crypto_algorithm)
  return _internal_crypto_algorithm();
}
inline void FdbMsgTokens::_internal_set_crypto_algorithm(::NFdbBase::FdbCryptoAlgorithm value) {
  assert(::NFdbBase::FdbCryptoAlgorithm_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  crypto_algorithm_ = value;
}
inline void FdbMsgTokens::set_crypto_algorithm(::NFdbBase::FdbCryptoAlgorithm value) {
  _internal_set_crypto_algorithm(value);
  // @@protoc_insertion_point(field_set:NFdbBase.FdbMsgTokens.crypto_algorithm)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace NFdbBase

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::NFdbBase::FdbCryptoAlgorithm> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2ebase_2eToken_2eproto
